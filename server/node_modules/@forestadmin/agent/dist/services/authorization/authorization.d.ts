import { Collection, ConditionTree } from '@forestadmin/datasource-toolkit';
import { ForestAdminClient } from '@forestadmin/forestadmin-client';
import { Context } from 'koa';
export default class AuthorizationService {
    private readonly forestAdminClient;
    constructor(forestAdminClient: ForestAdminClient);
    assertCanBrowse(context: Context, collectionName: string): Promise<void>;
    assertCanRead(context: Context, collectionName: string): Promise<void>;
    assertCanAdd(context: Context, collectionName: string): Promise<void>;
    assertCanEdit(context: Context, collectionName: string): Promise<void>;
    assertCanDelete(context: Context, collectionName: string): Promise<void>;
    assertCanExport(context: Context, collectionName: string): Promise<void>;
    private assertCanOnCollection;
    assertCanExecuteChart(context: Context): Promise<void>;
    getScope(collection: Collection, context: Context): Promise<ConditionTree>;
    invalidateScopeCache(renderingId: number | string): void;
}
//# sourceMappingURL=authorization.d.ts.map