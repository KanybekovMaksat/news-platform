/// <reference types="node" />
import { CompositeId, Logger, LoggerLevel } from '@forestadmin/datasource-toolkit';
import { ForestAdminClient } from '@forestadmin/forestadmin-client';
import { IncomingMessage, ServerResponse } from 'http';
/** Options to configure behavior of an agent's forestadmin driver */
export type AgentOptions = {
    authSecret: string;
    envSecret: string;
    customizeErrorMessage?: ((error: Error) => string | null) | null;
    forestServerUrl?: string;
    logger?: Logger;
    loggerLevel?: LoggerLevel;
    prefix?: string;
    isProduction: boolean;
    schemaPath?: string;
    typingsPath?: string | null;
    typingsMaxDepth?: number;
    permissionsCacheDurationInSeconds?: number;
    skipSchemaUpdate?: boolean;
    forestAdminClient?: ForestAdminClient;
};
export type AgentOptionsWithDefaults = Readonly<Required<AgentOptions>>;
export type HttpCallback = (req: IncomingMessage, res: ServerResponse) => void;
export declare enum HttpCode {
    BadRequest = 400,
    Forbidden = 403,
    InternalServerError = 500,
    NoContent = 204,
    NotFound = 404,
    Ok = 200,
    Unprocessable = 422
}
export declare enum RouteType {
    ErrorHandler = 0,
    LoggerHandler = 1,
    PublicRoute = 2,
    Authentication = 3,
    PrivateRoute = 4
}
export type SelectionIds = {
    areExcluded: boolean;
    ids: CompositeId[];
};
//# sourceMappingURL=types.d.ts.map