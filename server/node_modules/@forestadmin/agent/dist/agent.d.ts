import { CollectionCustomizer, DataSourceChartDefinition, DataSourceOptions, Plugin, TCollectionName, TSchema } from '@forestadmin/datasource-customizer';
import { DataSourceFactory } from '@forestadmin/datasource-toolkit';
import FrameworkMounter from './framework-mounter';
import { AgentOptions } from './types';
/**
 * Allow to create a new Forest Admin agent from scratch.
 * Builds the application by composing and configuring all the collection decorators.
 *
 * Minimal code to add a datasource
 * @example
 * new AgentBuilder(options)
 *  .addDataSource(new SomeDataSource())
 *  .start();
 */
export default class Agent<S extends TSchema = TSchema> extends FrameworkMounter {
    private options;
    private customizer;
    /**
     * Create a new Agent Builder.
     * If any options are missing, the default will be applied:
     * ```
     *  forestServerUrl: 'https://api.forestadmin.com',
     *  logger: (level, data) => console.error(level, data),
     *  prefix: 'api/v1',
     *  schemaPath: '.forestadmin-schema.json',
     *  permissionsCacheDurationInSeconds: 15 * 60,
     * ```
     * @param options options
     * @example
     * new AgentBuilder(options)
     *  .addDataSource(new DataSource())
     *  .start();
     */
    constructor(options: AgentOptions);
    /**
     * Start the agent.
     */
    start(): Promise<void>;
    /**
     * Add a datasource
     * @param factory the datasource to add
     * @param options the options
     */
    addDataSource(factory: DataSourceFactory, options?: DataSourceOptions): this;
    /**
     * Create a new API chart
     * @param name name of the chart
     * @param definition definition of the chart
     * @example
     * .addChart('numCustomers', {
     *   type: 'Value',
     *   render: (context, resultBuilder) => {
     *     return resultBuilder.value(123);
     *   }
     * })
     */
    addChart(name: string, definition: DataSourceChartDefinition<S>): this;
    /**
     * Allow to interact with a decorated collection
     * @param name the name of the collection to manipulate
     * @param handle a function that provide a
     *   collection builder on the given collection name
     * @example
     * .customizeCollection('books', books => books.renameField('xx', 'yy'))
     */
    customizeCollection<N extends TCollectionName<S>>(name: N, handle: (collection: CollectionCustomizer<S, N>) => unknown): this;
    /**
     * Load a plugin across all collections
     * @param plugin instance of the plugin
     * @param options options which need to be passed to the plugin
     * @example
     * import advancedExportPlugin from '@forestadmin/plugin-advanced-export';
     *
     * agent.use(advancedExportPlugin, { format: 'xlsx' });
     */
    use<Options>(plugin: Plugin<Options>, options?: Options): this;
    /**
     * Create an http handler which can respond to all queries which are expected from an agent.
     */
    private getRouter;
    /**
     * Send the apimap to forest admin server
     */
    private sendSchema;
}
//# sourceMappingURL=agent.d.ts.map