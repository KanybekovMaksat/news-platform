"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const object_hash_1 = __importDefault(require("object-hash"));
const approval_not_allowed_error_1 = __importDefault(require("./errors/approval-not-allowed-error"));
const custom_action_requires_approval_error_1 = __importDefault(require("./errors/custom-action-requires-approval-error"));
const custom_action_trigger_forbidden_error_1 = __importDefault(require("./errors/custom-action-trigger-forbidden-error"));
const invalid_action_condition_error_1 = __importDefault(require("./errors/invalid-action-condition-error"));
const condition_tree_parser_1 = __importDefault(require("../../../utils/condition-tree-parser"));
class ActionAuthorizationService {
    constructor(forestAdminClient) {
        this.forestAdminClient = forestAdminClient;
    }
    async assertCanTriggerCustomAction({ customActionName, collection, filterForCaller, filterForAllCaller, caller, }) {
        const canTrigger = await this.canTriggerCustomAction(caller, customActionName, collection, filterForCaller);
        if (!canTrigger) {
            throw new custom_action_trigger_forbidden_error_1.default();
        }
        const triggerRequiresApproval = await this.doesTriggerCustomActionRequiresApproval(caller, customActionName, collection, filterForCaller);
        if (triggerRequiresApproval) {
            const roleIdsAllowedToApprove = await this.getRoleIdsAllowedToApprove(caller, customActionName, collection, filterForAllCaller);
            throw new custom_action_requires_approval_error_1.default(roleIdsAllowedToApprove);
        }
    }
    async assertCanApproveCustomAction({ customActionName, requesterId, collection, filterForCaller, filterForAllCaller, caller, }) {
        const canApprove = await this.canApproveCustomAction(caller, customActionName, collection, filterForCaller, requesterId);
        if (!canApprove) {
            const roleIdsAllowedToApprove = await this.getRoleIdsAllowedToApprove(caller, customActionName, collection, filterForAllCaller);
            throw new approval_not_allowed_error_1.default(roleIdsAllowedToApprove);
        }
    }
    async assertCanRequestCustomActionParameters({ userId, customActionName, collectionName, }) {
        const canRequest = await this.forestAdminClient.permissionService.canRequestCustomActionParameters({
            userId,
            customActionName,
            collectionName,
        });
        if (!canRequest) {
            throw new datasource_toolkit_1.ForbiddenError();
        }
    }
    async canTriggerCustomAction(caller, customActionName, collection, filterForCaller) {
        const canTrigger = await this.forestAdminClient.permissionService.canTriggerCustomAction({
            userId: caller.id,
            customActionName,
            collectionName: collection.name,
        });
        if (!canTrigger) {
            return false;
        }
        const conditionalTriggerRawCondition = await this.forestAdminClient.permissionService.getConditionalTriggerCondition({
            userId: caller.id,
            customActionName,
            collectionName: collection.name,
        });
        return ActionAuthorizationService.canPerformConditionalCustomAction(caller, collection, filterForCaller, conditionalTriggerRawCondition);
    }
    async doesTriggerCustomActionRequiresApproval(caller, customActionName, collection, filterForCaller) {
        const doesTriggerRequiresApproval = await this.forestAdminClient.permissionService.doesTriggerCustomActionRequiresApproval({
            userId: caller.id,
            customActionName,
            collectionName: collection.name,
        });
        if (!doesTriggerRequiresApproval) {
            return false;
        }
        const conditionalRequiresApprovalRawCondition = await this.forestAdminClient.permissionService.getConditionalRequiresApprovalCondition({
            userId: caller.id,
            customActionName,
            collectionName: collection.name,
        });
        if (conditionalRequiresApprovalRawCondition) {
            const matchingRecordsCount = await ActionAuthorizationService.aggregateCountConditionIntersection(caller, collection, filterForCaller, conditionalRequiresApprovalRawCondition);
            // No records match the condition, trigger does not require approval
            if (matchingRecordsCount === 0) {
                return false;
            }
        }
        return true;
    }
    async canApproveCustomAction(caller, customActionName, collection, filterForCaller, requesterId) {
        const canApprove = await this.forestAdminClient.permissionService.canApproveCustomAction({
            userId: caller.id,
            requesterId,
            customActionName,
            collectionName: collection.name,
        });
        if (!canApprove) {
            return false;
        }
        const conditionalApproveRawCondition = await this.forestAdminClient.permissionService.getConditionalApproveCondition({
            userId: caller.id,
            customActionName,
            collectionName: collection.name,
        });
        return ActionAuthorizationService.canPerformConditionalCustomAction(caller, collection, filterForCaller, conditionalApproveRawCondition);
    }
    async getRoleIdsAllowedToApprove(caller, customActionName, collection, filterForAllCaller) {
        const actionConditionsByRoleId = await this.forestAdminClient.permissionService.getConditionalApproveConditions({
            customActionName,
            collectionName: collection.name,
        });
        const roleIdsAllowedToApproveWithoutConditions = await this.forestAdminClient.permissionService.getRoleIdsAllowedToApproveWithoutConditions({
            customActionName,
            collectionName: collection.name,
        });
        // Optimization - We groupBy conditions to only make the aggregate count once when possible
        const rolesIdsGroupByConditions = ActionAuthorizationService.transformToRolesIdsGroupByConditions(actionConditionsByRoleId);
        if (!rolesIdsGroupByConditions.length) {
            return roleIdsAllowedToApproveWithoutConditions;
        }
        const [requestRecordsCount, ...conditionRecordsCounts] = await Promise.all([
            ActionAuthorizationService.aggregateCountConditionIntersection(caller, collection, filterForAllCaller),
            ...rolesIdsGroupByConditions.map(({ condition }) => ActionAuthorizationService.aggregateCountConditionIntersection(caller, collection, filterForAllCaller, condition)),
        ]);
        return rolesIdsGroupByConditions.reduce((roleIdsAllowedToApprove, { roleIds }, currentIndex) => {
            if (requestRecordsCount === conditionRecordsCounts[currentIndex]) {
                roleIdsAllowedToApprove.push(...roleIds);
            }
            return roleIdsAllowedToApprove;
        }, 
        // Roles  with userApprovalEnabled excluding the one with conditions
        // are allowed to approve by default
        roleIdsAllowedToApproveWithoutConditions);
    }
    static async canPerformConditionalCustomAction(caller, collection, requestFilter, condition) {
        if (condition) {
            const [requestRecordsCount, matchingRecordsCount] = await Promise.all([
                ActionAuthorizationService.aggregateCountConditionIntersection(caller, collection, requestFilter),
                ActionAuthorizationService.aggregateCountConditionIntersection(caller, collection, requestFilter, condition),
            ]);
            // If all records condition the condition everything is ok
            // Otherwise when some records don't match the condition then the user
            // is not allow to perform the conditional action
            return matchingRecordsCount === requestRecordsCount;
        }
        return true;
    }
    static async aggregateCountConditionIntersection(caller, collection, requestFilter, condition) {
        try {
            // Override request filter with condition if any
            const conditionalFilter = requestFilter.override({
                conditionTree: condition
                    ? datasource_toolkit_1.ConditionTreeFactory.intersect(condition_tree_parser_1.default.fromPlainObject(collection, condition), requestFilter.conditionTree)
                    : requestFilter.conditionTree,
            });
            const rows = await collection.aggregate(caller, conditionalFilter, new datasource_toolkit_1.Aggregation({
                operation: 'Count',
            }));
            return rows?.[0]?.value ?? 0;
        }
        catch (error) {
            throw new invalid_action_condition_error_1.default();
        }
    }
    /**
     * Given a map it groups keys based on their hash values
     */
    static transformToRolesIdsGroupByConditions(actionConditionsByRoleId) {
        const rolesIdsGroupByConditions = Array.from(actionConditionsByRoleId, ([roleId, condition]) => {
            return {
                roleId,
                condition,
                conditionHash: (0, object_hash_1.default)(condition, { respectType: false }),
            };
        }).reduce((acc, current) => {
            const { roleId, condition, conditionHash } = current;
            if (acc.has(conditionHash)) {
                acc.get(conditionHash).roleIds.push(roleId);
            }
            else {
                acc.set(conditionHash, { roleIds: [roleId], condition });
            }
            return acc;
        }, new Map());
        return Array.from(rolesIdsGroupByConditions.values());
    }
}
exports.default = ActionAuthorizationService;
//# sourceMappingURL=data:application/json;base64,