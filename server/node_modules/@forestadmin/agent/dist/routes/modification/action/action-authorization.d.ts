import { Caller, Collection, Filter } from '@forestadmin/datasource-toolkit';
import { ForestAdminClient } from '@forestadmin/forestadmin-client';
type CanPerformCustomActionParams = {
    caller: Caller;
    customActionName: string;
    collection: Collection;
    filterForCaller: Filter;
    filterForAllCaller: Filter;
};
export default class ActionAuthorizationService {
    private readonly forestAdminClient;
    constructor(forestAdminClient: ForestAdminClient);
    assertCanTriggerCustomAction({ customActionName, collection, filterForCaller, filterForAllCaller, caller, }: CanPerformCustomActionParams): Promise<void>;
    assertCanApproveCustomAction({ customActionName, requesterId, collection, filterForCaller, filterForAllCaller, caller, }: CanPerformCustomActionParams & {
        requesterId: number | string;
    }): Promise<void>;
    assertCanRequestCustomActionParameters({ userId, customActionName, collectionName, }: {
        userId: number;
        customActionName: string;
        collectionName: string;
    }): Promise<void>;
    private canTriggerCustomAction;
    private doesTriggerCustomActionRequiresApproval;
    private canApproveCustomAction;
    private getRoleIdsAllowedToApprove;
    private static canPerformConditionalCustomAction;
    private static aggregateCountConditionIntersection;
    /**
     * Given a map it groups keys based on their hash values
     */
    private static transformToRolesIdsGroupByConditions;
}
export {};
//# sourceMappingURL=action-authorization.d.ts.map