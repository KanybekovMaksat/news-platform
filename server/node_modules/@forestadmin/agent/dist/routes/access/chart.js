"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const forestadmin_client_1 = require("@forestadmin/forestadmin-client");
const luxon_1 = require("luxon");
const uuid_1 = require("uuid");
const context_filter_factory_1 = __importDefault(require("../../utils/context-filter-factory"));
const query_string_1 = __importDefault(require("../../utils/query-string"));
const collection_route_1 = __importDefault(require("../collection-route"));
class ChartRoute extends collection_route_1.default {
    setupRoutes(router) {
        router.post(`/stats/${this.collection.name}`, this.handleChart.bind(this));
    }
    async handleChart(context) {
        await this.services.authorization.assertCanExecuteChart(context);
        context.response.body = {
            data: {
                id: (0, uuid_1.v1)(),
                type: 'stats',
                attributes: { value: await this.makeChart(context) },
            },
        };
    }
    async makeChart(context) {
        const chartRequest = context.request.body;
        const { renderingId, id: userId } = context.state.user;
        context.request.body = await this.services.chartHandler.getChartWithContextInjected({
            userId,
            renderingId,
            chartRequest,
        });
        switch (chartRequest.type) {
            case forestadmin_client_1.ChartType.Value:
                return this.makeValueChart(context);
            case forestadmin_client_1.ChartType.Leaderboard:
                return this.makeLeaderboardChart(context);
            case forestadmin_client_1.ChartType.Objective:
                return this.makeObjectiveChart(context);
            case forestadmin_client_1.ChartType.Pie:
                return this.makePieChart(context);
            case forestadmin_client_1.ChartType.Line:
                return this.makeLineChart(context);
            default:
                throw new datasource_toolkit_1.ValidationError(`Invalid Chart type "${chartRequest.type}"`);
        }
    }
    async makeValueChart(context) {
        const caller = query_string_1.default.parseCaller(context);
        const currentFilter = await this.getFilter(context);
        const result = {
            countCurrent: await this.computeValue(context, currentFilter),
            countPrevious: undefined,
        };
        const isAndAggregator = currentFilter.conditionTree?.aggregator === 'And';
        const withCountPrevious = currentFilter.conditionTree?.someLeaf(leaf => leaf.useIntervalOperator);
        if (withCountPrevious && !isAndAggregator) {
            result.countPrevious = await this.computeValue(context, datasource_toolkit_1.FilterFactory.getPreviousPeriodFilter(currentFilter, caller.timezone));
        }
        return result;
    }
    async makeObjectiveChart(context) {
        return { value: await this.computeValue(context, await this.getFilter(context)) };
    }
    async makePieChart(context) {
        const { groupByFieldName: groupByField, aggregator, aggregateFieldName: aggregateField, } = context.request.body;
        const rows = await this.collection.aggregate(query_string_1.default.parseCaller(context), await this.getFilter(context), new datasource_toolkit_1.Aggregation({
            operation: aggregator,
            field: aggregateField,
            groups: [{ field: groupByField }],
        }));
        return rows.map(row => ({
            key: row.group[groupByField],
            value: row.value,
        }));
    }
    async makeLineChart(context) {
        const { aggregator, aggregateFieldName: aggregateField, groupByFieldName: groupByDateField, timeRange, } = context.request.body;
        const filter = await this.getFilter(context);
        const filterOnlyWithValues = filter.override({
            conditionTree: datasource_toolkit_1.ConditionTreeFactory.intersect(filter.conditionTree, new datasource_toolkit_1.ConditionTreeLeaf(groupByDateField, 'Present')),
        });
        const rows = await this.collection.aggregate(query_string_1.default.parseCaller(context), filterOnlyWithValues, new datasource_toolkit_1.Aggregation({
            operation: aggregator,
            field: aggregateField,
            groups: [{ field: groupByDateField, operation: timeRange }],
        }));
        const values = {};
        rows.forEach(row => {
            values[luxon_1.DateTime.fromISO(row.group[groupByDateField]).toISODate()] = Number(row.value);
        });
        const dates = Object.keys(values).sort((dateA, dateB) => dateA.localeCompare(dateB));
        const last = luxon_1.DateTime.fromISO(dates[dates.length - 1]);
        const dataPoints = [];
        const format = ChartRoute.formats[timeRange];
        for (let current = luxon_1.DateTime.fromISO(dates[0]); current <= last; current = current.plus({ [timeRange]: 1 })) {
            const label = current.toFormat(format);
            const value = values[current.toISODate()] ?? 0;
            dataPoints.push({ label, values: { value } });
        }
        return dataPoints;
    }
    async makeLeaderboardChart(context) {
        const body = context.request.body;
        const field = this.collection.schema.fields[body.relationshipFieldName];
        let collection;
        let filter;
        let aggregation;
        if (field?.type === 'OneToMany') {
            const inverse = datasource_toolkit_1.CollectionUtils.getInverseRelation(this.collection, body.relationshipFieldName);
            if (inverse) {
                collection = field.foreignCollection;
                filter = (await this.getFilter(context)).nest(inverse);
                aggregation = new datasource_toolkit_1.Aggregation({
                    operation: body.aggregator,
                    field: body.aggregateFieldName,
                    groups: [{ field: `${inverse}:${body.labelFieldName}` }],
                });
            }
        }
        if (field?.type === 'ManyToMany') {
            const origin = datasource_toolkit_1.CollectionUtils.getThroughOrigin(this.collection, body.relationshipFieldName);
            const target = datasource_toolkit_1.CollectionUtils.getThroughTarget(this.collection, body.relationshipFieldName);
            if (origin && target) {
                collection = field.throughCollection;
                filter = (await this.getFilter(context)).nest(origin);
                aggregation = new datasource_toolkit_1.Aggregation({
                    operation: body.aggregator,
                    field: body.aggregateFieldName ? `${target}:${body.aggregateFieldName}` : null,
                    groups: [{ field: `${origin}:${body.labelFieldName}` }],
                });
            }
        }
        if (collection && filter && aggregation) {
            const rows = await this.dataSource
                .getCollection(collection)
                .aggregate(query_string_1.default.parseCaller(context), filter, aggregation, Number(body.limit));
            return rows.map(row => ({
                key: row.group[aggregation.groups[0].field],
                value: row.value,
            }));
        }
        throw new datasource_toolkit_1.ValidationError(`Failed to generate leaderboard chart: parameters do not match pre-requisites`);
    }
    async computeValue(context, filter) {
        const { aggregator, aggregateFieldName: aggregateField } = (context.request.body);
        const aggregation = new datasource_toolkit_1.Aggregation({ operation: aggregator, field: aggregateField });
        const rows = await this.collection.aggregate(query_string_1.default.parseCaller(context), filter, aggregation);
        return rows.length ? rows[0].value : 0;
    }
    async getFilter(context) {
        const scope = await this.services.authorization.getScope(this.collection, context);
        return context_filter_factory_1.default.build(this.collection, context, scope);
    }
}
exports.default = ChartRoute;
ChartRoute.formats = {
    Day: 'dd/MM/yyyy',
    Week: "'W'W-yyyy",
    Month: 'MMM yy',
    Year: 'yyyy',
};
//# sourceMappingURL=data:application/json;base64,