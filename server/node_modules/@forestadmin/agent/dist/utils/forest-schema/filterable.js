"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class FrontendFilterableUtils {
    /**
     * Compute if a column if filterable according to forestadmin's frontend.
     *
     * @param type column's type (string, number, or a composite type)
     * @param operators list of operators that the column supports
     * @returns either if the frontend would consider this column filterable or not.
     */
    static isFilterable(type, operators) {
        const neededOperators = FrontendFilterableUtils.getRequiredOperators(type);
        const supportedOperators = operators ?? new Set();
        return Boolean(neededOperators && neededOperators.every(op => supportedOperators.has(op)));
    }
    static getRequiredOperators(type) {
        if (typeof type === 'string' && FrontendFilterableUtils.operatorByType[type]) {
            return FrontendFilterableUtils.operatorByType[type];
        }
        // It sound highly unlikely that this operator can work with dates, or nested objects
        // and they should be more restricted, however the frontend code does not seems to check the
        // array's content so I'm replicating the same test here
        if (Array.isArray(type)) {
            return ['IncludesAll'];
        }
        return null;
    }
}
exports.default = FrontendFilterableUtils;
FrontendFilterableUtils.baseOperators = ['Equal', 'NotEqual', 'Present', 'Blank'];
FrontendFilterableUtils.dateOperators = [
    ...FrontendFilterableUtils.baseOperators,
    'LessThan',
    'GreaterThan',
    'Today',
    'Yesterday',
    'PreviousXDays',
    'PreviousWeek',
    'PreviousQuarter',
    'PreviousYear',
    'PreviousXDaysToDate',
    'PreviousWeekToDate',
    'PreviousMonthToDate',
    'PreviousQuarterToDate',
    'PreviousYearToDate',
    'Past',
    'Future',
    'BeforeXHoursAgo',
    'AfterXHoursAgo',
];
FrontendFilterableUtils.operatorByType = {
    Boolean: FrontendFilterableUtils.baseOperators,
    Date: FrontendFilterableUtils.dateOperators,
    Dateonly: FrontendFilterableUtils.dateOperators,
    Enum: [...FrontendFilterableUtils.baseOperators, 'In'],
    Number: [...FrontendFilterableUtils.baseOperators, 'In', 'GreaterThan', 'LessThan'],
    String: [
        ...FrontendFilterableUtils.baseOperators,
        'In',
        'StartsWith',
        'EndsWith',
        'Contains',
        'NotContains',
    ],
    Timeonly: [...FrontendFilterableUtils.baseOperators, 'GreaterThan', 'LessThan'],
    Uuid: FrontendFilterableUtils.baseOperators,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyYWJsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9mb3Jlc3Qtc2NoZW1hL2ZpbHRlcmFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxNQUFxQix1QkFBdUI7SUEwQzFDOzs7Ozs7T0FNRztJQUNILE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBZ0IsRUFBRSxTQUF5QjtRQUM3RCxNQUFNLGVBQWUsR0FBRyx1QkFBdUIsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzRSxNQUFNLGtCQUFrQixHQUFHLFNBQVMsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBRWxELE9BQU8sT0FBTyxDQUFDLGVBQWUsSUFBSSxlQUFlLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3RixDQUFDO0lBRUQsTUFBTSxDQUFDLG9CQUFvQixDQUFDLElBQWdCO1FBQzFDLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxJQUFJLHVCQUF1QixDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM1RSxPQUFPLHVCQUF1QixDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNyRDtRQUVELHFGQUFxRjtRQUNyRiw0RkFBNEY7UUFDNUYsd0RBQXdEO1FBQ3hELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN2QixPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDeEI7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7O0FBckVILDBDQXNFQztBQXJFeUIscUNBQWEsR0FBZSxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBRXRFLHFDQUFhLEdBQWU7SUFDbEQsR0FBRyx1QkFBdUIsQ0FBQyxhQUFhO0lBQ3hDLFVBQVU7SUFDVixhQUFhO0lBQ2IsT0FBTztJQUNQLFdBQVc7SUFDWCxlQUFlO0lBQ2YsY0FBYztJQUNkLGlCQUFpQjtJQUNqQixjQUFjO0lBQ2QscUJBQXFCO0lBQ3JCLG9CQUFvQjtJQUNwQixxQkFBcUI7SUFDckIsdUJBQXVCO0lBQ3ZCLG9CQUFvQjtJQUNwQixNQUFNO0lBQ04sUUFBUTtJQUNSLGlCQUFpQjtJQUNqQixnQkFBZ0I7Q0FDakIsQ0FBQztBQUVzQixzQ0FBYyxHQUFnRDtJQUNwRixPQUFPLEVBQUUsdUJBQXVCLENBQUMsYUFBYTtJQUM5QyxJQUFJLEVBQUUsdUJBQXVCLENBQUMsYUFBYTtJQUMzQyxRQUFRLEVBQUUsdUJBQXVCLENBQUMsYUFBYTtJQUMvQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLHVCQUF1QixDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUM7SUFDdEQsTUFBTSxFQUFFLENBQUMsR0FBRyx1QkFBdUIsQ0FBQyxhQUFhLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxVQUFVLENBQUM7SUFDbkYsTUFBTSxFQUFFO1FBQ04sR0FBRyx1QkFBdUIsQ0FBQyxhQUFhO1FBQ3hDLElBQUk7UUFDSixZQUFZO1FBQ1osVUFBVTtRQUNWLFVBQVU7UUFDVixhQUFhO0tBQ2Q7SUFDRCxRQUFRLEVBQUUsQ0FBQyxHQUFHLHVCQUF1QixDQUFDLGFBQWEsRUFBRSxhQUFhLEVBQUUsVUFBVSxDQUFDO0lBQy9FLElBQUksRUFBRSx1QkFBdUIsQ0FBQyxhQUFhO0NBQzVDLENBQUMifQ==