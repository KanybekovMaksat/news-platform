import { ActionField, DataSource } from '@forestadmin/datasource-toolkit';
type FormData = Record<string, unknown>;
/**
 * This utility class converts form values from our internal format to the format that is
 * used in the frontend for action forms.
 */
export default class ForestValueConverter {
    /**
     * Proper form data parser which converts data from an action form result to the format
     * that is internally used in datasources.
     */
    static makeFormData(dataSource: DataSource, rawData: FormData, fields: ActionField[]): FormData;
    /**
     * Form data parser which extracts the data from what is provided by the frontend when
     * change hooks are called.
     */
    static makeFormDataFromFields(dataSource: DataSource, fields: any[]): FormData;
    /**
     * This last form data parser tries to guess the types from the data itself.
     *
     * - Fields with type "Collection" which target collections where the pk is not a string or
     * derivative (mongoid, uuid, ...) won't be parser correctly, as we don't have enough information
     * to properly guess the type
     * - Fields of type "String" but where the final user entered a data-uri manually in the frontend
     * will be wrongfully parsed.
     */
    static makeFormDataUnsafe(rawData: FormData): FormData;
    static valueToForest(field: ActionField, value: unknown): unknown;
    private static parseDataUri;
    private static makeDataUri;
    private static isDataUri;
}
export {};
//# sourceMappingURL=action-values.d.ts.map