"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
class IdUtils {
    static packIds(schema, records) {
        return records.map(packedId => IdUtils.packId(schema, packedId));
    }
    static packId(schema, record) {
        const pkNames = datasource_toolkit_1.SchemaUtils.getPrimaryKeys(schema);
        if (!pkNames.length) {
            throw new Error('This collection has no primary key');
        }
        if (pkNames.some(pkName => record[pkName] === undefined)) {
            throw new Error(`Missing one of expected fields: '${pkNames.join("', '")}'`);
        }
        return pkNames.map(pk => String(record[pk])).join('|');
    }
    static unpackIds(schema, packedIds) {
        if (!Array.isArray(packedIds)) {
            throw new datasource_toolkit_1.ValidationError(`Expected array, received: ${typeof packedIds}`);
        }
        return packedIds.map(packedId => IdUtils.unpackId(schema, packedId));
    }
    static unpackId(schema, packedId) {
        if (typeof packedId !== 'string') {
            throw new datasource_toolkit_1.ValidationError(`Expected string, received: ${typeof packedId}`);
        }
        const pkNames = datasource_toolkit_1.SchemaUtils.getPrimaryKeys(schema);
        const pkValues = packedId.split('|');
        if (pkValues.length !== pkNames.length) {
            throw new datasource_toolkit_1.ValidationError(`Expected ${pkNames.length} values, found ${pkValues.length}`);
        }
        return pkNames.map((pkName, index) => {
            const schemaField = schema.fields[pkName];
            const value = pkValues[index];
            const castedValue = schemaField.columnType === 'Number' ? Number(value) : value;
            datasource_toolkit_1.FieldValidator.validateValueForId(pkName, schemaField, castedValue);
            return castedValue;
        });
    }
}
exports.default = IdUtils;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvaWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx3RUFReUM7QUFFekMsTUFBcUIsT0FBTztJQUMxQixNQUFNLENBQUMsT0FBTyxDQUFDLE1BQXdCLEVBQUUsT0FBcUI7UUFDNUQsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUF3QixFQUFFLE1BQWtCO1FBQ3hELE1BQU0sT0FBTyxHQUFHLGdDQUFXLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRW5ELElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQ25CLE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQztTQUN2RDtRQUVELElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxTQUFTLENBQUMsRUFBRTtZQUN4RCxNQUFNLElBQUksS0FBSyxDQUFDLG9DQUFvQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUM5RTtRQUVELE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRUQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUF3QixFQUFFLFNBQW1CO1FBQzVELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQzdCLE1BQU0sSUFBSSxvQ0FBZSxDQUFDLDZCQUE2QixPQUFPLFNBQVMsRUFBRSxDQUFDLENBQUM7U0FDNUU7UUFFRCxPQUFPLFNBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFRCxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQXdCLEVBQUUsUUFBZ0I7UUFDeEQsSUFBSSxPQUFPLFFBQVEsS0FBSyxRQUFRLEVBQUU7WUFDaEMsTUFBTSxJQUFJLG9DQUFlLENBQUMsOEJBQThCLE9BQU8sUUFBUSxFQUFFLENBQUMsQ0FBQztTQUM1RTtRQUVELE1BQU0sT0FBTyxHQUFHLGdDQUFXLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ25ELE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFckMsSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDdEMsTUFBTSxJQUFJLG9DQUFlLENBQUMsWUFBWSxPQUFPLENBQUMsTUFBTSxrQkFBa0IsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7U0FDMUY7UUFFRCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDbkMsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQWlCLENBQUM7WUFDMUQsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRTlCLE1BQU0sV0FBVyxHQUFHLFdBQVcsQ0FBQyxVQUFVLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUNoRixtQ0FBYyxDQUFDLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFFcEUsT0FBTyxXQUFXLENBQUM7UUFDckIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFqREQsMEJBaURDIn0=