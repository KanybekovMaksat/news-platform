"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CHUNK_SIZE = void 0;
const format_1 = require("@fast-csv/format");
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
exports.CHUNK_SIZE = 1000;
class CsvGenerator {
    /**
     * Use an async generator to ensure that
     * - backpressure is properly applied without needing to extend Readable (for slow clients)
     * - we stop making queries to the database if the client closes the connection.
     */
    static async *generate(caller, projection, header, filter, collection, list) {
        yield (0, format_1.writeToString)([header.split(',')], { headers: true, includeEndRowDelimiter: true });
        const copiedFilter = { ...filter };
        if (!copiedFilter.sort || copiedFilter.sort.length === 0) {
            copiedFilter.sort = datasource_toolkit_1.SortFactory.byPrimaryKeys(collection);
        }
        let currentIndex = 0;
        let areAllRecordsFetched = false;
        while (!areAllRecordsFetched) {
            // the first argument is included in the range, the second is excluded
            copiedFilter.page = new datasource_toolkit_1.Page(currentIndex, exports.CHUNK_SIZE);
            // eslint-disable-next-line no-await-in-loop
            const records = await list(caller, new datasource_toolkit_1.PaginatedFilter(copiedFilter), projection);
            if (records.length !== 0)
                yield CsvGenerator.convert(records, projection);
            areAllRecordsFetched = records.length < exports.CHUNK_SIZE;
            currentIndex += exports.CHUNK_SIZE;
        }
    }
    static convert(records, projection) {
        return (0, format_1.writeToString)(records.map(record => projection.map(field => datasource_toolkit_1.RecordUtils.getFieldValue(record, field))), { includeEndRowDelimiter: true });
    }
}
exports.default = CsvGenerator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3N2LWdlbmVyYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9jc3YtZ2VuZXJhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZDQUFpRDtBQUNqRCx3RUFTeUM7QUFFNUIsUUFBQSxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBRS9CLE1BQXFCLFlBQVk7SUFDL0I7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQ3BCLE1BQWMsRUFDZCxVQUFzQixFQUN0QixNQUFjLEVBQ2QsTUFBdUIsRUFDdkIsVUFBc0IsRUFDdEIsSUFBd0I7UUFFeEIsTUFBTSxJQUFBLHNCQUFhLEVBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHNCQUFzQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFFMUYsTUFBTSxZQUFZLEdBQUcsRUFBRSxHQUFHLE1BQU0sRUFBRSxDQUFDO1FBRW5DLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN4RCxZQUFZLENBQUMsSUFBSSxHQUFHLGdDQUFXLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQzNEO1FBRUQsSUFBSSxZQUFZLEdBQUcsQ0FBQyxDQUFDO1FBQ3JCLElBQUksb0JBQW9CLEdBQUcsS0FBSyxDQUFDO1FBRWpDLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRTtZQUM1QixzRUFBc0U7WUFDdEUsWUFBWSxDQUFDLElBQUksR0FBRyxJQUFJLHlCQUFJLENBQUMsWUFBWSxFQUFFLGtCQUFVLENBQUMsQ0FBQztZQUV2RCw0Q0FBNEM7WUFDNUMsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksb0NBQWUsQ0FBQyxZQUFZLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztZQUVsRixJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssQ0FBQztnQkFBRSxNQUFNLFlBQVksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBRTFFLG9CQUFvQixHQUFHLE9BQU8sQ0FBQyxNQUFNLEdBQUcsa0JBQVUsQ0FBQztZQUVuRCxZQUFZLElBQUksa0JBQVUsQ0FBQztTQUM1QjtJQUNILENBQUM7SUFFTyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQXFCLEVBQUUsVUFBc0I7UUFDbEUsT0FBTyxJQUFBLHNCQUFhLEVBQ2xCLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsZ0NBQVcsQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFDeEYsRUFBRSxzQkFBc0IsRUFBRSxJQUFJLEVBQUUsQ0FDakMsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQTlDRCwrQkE4Q0MifQ==