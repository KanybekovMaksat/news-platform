"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const factory_1 = __importDefault(require("../factory"));
exports.default = () => ({
    Blank: [
        {
            dependsOn: ['In'],
            forTypes: ['String'],
            replacer: leaf => leaf.override({ operator: 'In', value: [null, ''] }),
        },
        {
            dependsOn: ['Missing'],
            replacer: leaf => leaf.override({ operator: 'Missing' }),
        },
    ],
    Missing: [
        {
            dependsOn: ['Equal'],
            replacer: leaf => leaf.override({ operator: 'Equal', value: null }),
        },
    ],
    Present: [
        {
            dependsOn: ['NotIn'],
            forTypes: ['String'],
            replacer: leaf => leaf.override({ operator: 'NotIn', value: [null, ''] }),
        },
        {
            dependsOn: ['NotEqual'],
            replacer: leaf => leaf.override({ operator: 'NotEqual', value: null }),
        },
    ],
    Equal: [
        {
            dependsOn: ['In'],
            replacer: leaf => leaf.override({ operator: 'In', value: [leaf.value] }),
        },
    ],
    In: [
        {
            dependsOn: ['Equal'],
            replacer: leaf => factory_1.default.union(...leaf.value.map(item => leaf.override({ operator: 'Equal', value: item }))),
        },
    ],
    NotEqual: [
        {
            dependsOn: ['NotIn'],
            replacer: leaf => leaf.override({ operator: 'NotIn', value: [leaf.value] }),
        },
    ],
    NotIn: [
        {
            dependsOn: ['NotEqual'],
            replacer: leaf => factory_1.default.intersect(...leaf.value.map(item => leaf.override({ operator: 'NotEqual', value: item }))),
        },
    ],
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGFyaXNvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9pbnRlcmZhY2VzL3F1ZXJ5L2NvbmRpdGlvbi10cmVlL3RyYW5zZm9ybXMvY29tcGFyaXNvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLHlEQUE4QztBQUk5QyxrQkFBZSxHQUE2QyxFQUFFLENBQUMsQ0FBQztJQUM5RCxLQUFLLEVBQUU7UUFDTDtZQUNFLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQztZQUNqQixRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUM7WUFDcEIsUUFBUSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUM7U0FDdkU7UUFDRDtZQUNFLFNBQVMsRUFBRSxDQUFDLFNBQVMsQ0FBQztZQUN0QixRQUFRLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxDQUFDO1NBQ3pEO0tBQ0Y7SUFDRCxPQUFPLEVBQUU7UUFDUDtZQUNFLFNBQVMsRUFBRSxDQUFDLE9BQU8sQ0FBQztZQUNwQixRQUFRLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUM7U0FDcEU7S0FDRjtJQUNELE9BQU8sRUFBRTtRQUNQO1lBQ0UsU0FBUyxFQUFFLENBQUMsT0FBTyxDQUFDO1lBQ3BCLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQztZQUNwQixRQUFRLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQztTQUMxRTtRQUNEO1lBQ0UsU0FBUyxFQUFFLENBQUMsVUFBVSxDQUFDO1lBQ3ZCLFFBQVEsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQztTQUN2RTtLQUNGO0lBQ0QsS0FBSyxFQUFFO1FBQ0w7WUFDRSxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUM7WUFDakIsUUFBUSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7U0FDekU7S0FDRjtJQUNELEVBQUUsRUFBRTtRQUNGO1lBQ0UsU0FBUyxFQUFFLENBQUMsT0FBTyxDQUFDO1lBQ3BCLFFBQVEsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUNmLGlCQUFvQixDQUFDLEtBQUssQ0FDeEIsR0FBSSxJQUFJLENBQUMsS0FBbUIsQ0FBQyxHQUFHLENBQWdCLElBQUksQ0FBQyxFQUFFLENBQ3JELElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUNsRCxDQUNGO1NBQ0o7S0FDRjtJQUNELFFBQVEsRUFBRTtRQUNSO1lBQ0UsU0FBUyxFQUFFLENBQUMsT0FBTyxDQUFDO1lBQ3BCLFFBQVEsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1NBQzVFO0tBQ0Y7SUFDRCxLQUFLLEVBQUU7UUFDTDtZQUNFLFNBQVMsRUFBRSxDQUFDLFVBQVUsQ0FBQztZQUN2QixRQUFRLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FDZixpQkFBb0IsQ0FBQyxTQUFTLENBQzVCLEdBQUksSUFBSSxDQUFDLEtBQW1CLENBQUMsR0FBRyxDQUFnQixJQUFJLENBQUMsRUFBRSxDQUNyRCxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FDckQsQ0FDRjtTQUNKO0tBQ0Y7Q0FDRixDQUFDLENBQUMifQ==