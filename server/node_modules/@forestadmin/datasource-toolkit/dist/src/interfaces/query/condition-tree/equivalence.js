"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const comparison_1 = __importDefault(require("./transforms/comparison"));
const pattern_1 = __importDefault(require("./transforms/pattern"));
const time_1 = __importDefault(require("./transforms/time"));
class ConditionTreeEquivalent {
    static getEquivalentTree(leaf, operators, columnType, timezone) {
        const { operator } = leaf;
        return ConditionTreeEquivalent.getReplacer(operator, operators, columnType)(leaf, timezone);
    }
    static hasEquivalentTree(operator, operators, columnType) {
        return !!ConditionTreeEquivalent.getReplacer(operator, operators, columnType);
    }
    /** Find a way to replace an operator by recursively exploring the transforms graph */
    static getReplacer(op, filterOperators, columnType, visited = []) {
        if (filterOperators?.has(op))
            return leaf => leaf;
        for (const alt of ConditionTreeEquivalent.getAlternatives(op) ?? []) {
            const { replacer, dependsOn } = alt;
            const valid = !alt.forTypes || alt.forTypes.includes(columnType);
            if (valid && !visited.includes(alt)) {
                const dependsReplacers = dependsOn.map(replacement => {
                    return this.getReplacer(replacement, filterOperators, columnType, [...visited, alt]);
                });
                if (dependsReplacers.every(r => !!r)) {
                    return (leaf, timezone) => replacer(leaf, timezone).replaceLeafs(subLeaf => dependsReplacers[dependsOn.indexOf(subLeaf.operator)](subLeaf, timezone));
                }
            }
        }
        return null;
    }
    static getAlternatives(operator) {
        // Init cache at first call to work around cyclic dependencies
        if (!ConditionTreeEquivalent.alternatives) {
            ConditionTreeEquivalent.alternatives = {
                ...(0, comparison_1.default)(),
                ...(0, pattern_1.default)(),
                ...(0, time_1.default)(),
            };
        }
        return ConditionTreeEquivalent.alternatives[operator];
    }
}
exports.default = ConditionTreeEquivalent;
ConditionTreeEquivalent.alternatives = null;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXF1aXZhbGVuY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvaW50ZXJmYWNlcy9xdWVyeS9jb25kaXRpb24tdHJlZS9lcXVpdmFsZW5jZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUdBLHlFQUF5RDtBQUN6RCxtRUFBcUQ7QUFDckQsNkRBQStDO0FBVy9DLE1BQXFCLHVCQUF1QjtJQUcxQyxNQUFNLENBQUMsaUJBQWlCLENBQ3RCLElBQXVCLEVBQ3ZCLFNBQXdCLEVBQ3hCLFVBQXNCLEVBQ3RCLFFBQWdCO1FBRWhCLE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFFMUIsT0FBTyx1QkFBdUIsQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDOUYsQ0FBQztJQUVELE1BQU0sQ0FBQyxpQkFBaUIsQ0FDdEIsUUFBa0IsRUFDbEIsU0FBd0IsRUFDeEIsVUFBc0I7UUFFdEIsT0FBTyxDQUFDLENBQUMsdUJBQXVCLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDaEYsQ0FBQztJQUVELHNGQUFzRjtJQUM5RSxNQUFNLENBQUMsV0FBVyxDQUN4QixFQUFZLEVBQ1osZUFBOEIsRUFDOUIsVUFBc0IsRUFDdEIsVUFBcUIsRUFBRTtRQUV2QixJQUFJLGVBQWUsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQUUsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQztRQUVsRCxLQUFLLE1BQU0sR0FBRyxJQUFJLHVCQUF1QixDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDbkUsTUFBTSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsR0FBRyxHQUFHLENBQUM7WUFDcEMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsUUFBUSxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFVBQTRCLENBQUMsQ0FBQztZQUVuRixJQUFJLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ25DLE1BQU0sZ0JBQWdCLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRTtvQkFDbkQsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxlQUFlLEVBQUUsVUFBVSxFQUFFLENBQUMsR0FBRyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDdkYsQ0FBQyxDQUFDLENBQUM7Z0JBRUgsSUFBSSxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ3BDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FDeEIsUUFBUSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FDOUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQ3pFLENBQUM7aUJBQ0w7YUFDRjtTQUNGO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU8sTUFBTSxDQUFDLGVBQWUsQ0FBQyxRQUFrQjtRQUMvQyw4REFBOEQ7UUFDOUQsSUFBSSxDQUFDLHVCQUF1QixDQUFDLFlBQVksRUFBRTtZQUN6Qyx1QkFBdUIsQ0FBQyxZQUFZLEdBQUc7Z0JBQ3JDLEdBQUcsSUFBQSxvQkFBa0IsR0FBRTtnQkFDdkIsR0FBRyxJQUFBLGlCQUFpQixHQUFFO2dCQUN0QixHQUFHLElBQUEsY0FBYyxHQUFFO2FBQ3BCLENBQUM7U0FDSDtRQUVELE9BQU8sdUJBQXVCLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3hELENBQUM7O0FBL0RILDBDQWdFQztBQS9EZ0Isb0NBQVksR0FBNkMsSUFBSSxDQUFDIn0=