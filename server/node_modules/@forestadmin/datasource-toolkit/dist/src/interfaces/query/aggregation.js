"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const luxon_1 = require("luxon");
const object_hash_1 = __importDefault(require("object-hash"));
const projection_1 = __importDefault(require("./projection"));
const record_1 = __importDefault(require("../../utils/record"));
class Aggregation {
    get projection() {
        const { field, groups } = this;
        const aggregateFields = [field, ...(groups ?? []).map(b => b.field)].filter(Boolean);
        return new projection_1.default(...aggregateFields);
    }
    constructor(components) {
        this.field = components.field;
        this.operation = components.operation;
        this.groups = components.groups;
    }
    apply(records, timezone, limit) {
        const rows = this.formatSummaries(this.createSummaries(records, timezone));
        rows.sort((r1, r2) => {
            if (r1.value === r2.value)
                return 0;
            return r1.value < r2.value ? 1 : -1;
        });
        if (limit && rows.length > limit) {
            rows.length = limit;
        }
        return rows;
    }
    nest(prefix) {
        if (!prefix || prefix.length === 0) {
            return this;
        }
        let nestedField;
        let nestedGroups;
        if (this.field) {
            nestedField = `${prefix}:${this.field}`;
        }
        if (this.groups)
            nestedGroups = this.groups.map(bucket => ({
                field: `${prefix}:${bucket.field}`,
                operation: bucket.operation,
            }));
        return new Aggregation({ field: nestedField, operation: this.operation, groups: nestedGroups });
    }
    replaceFields(handler) {
        const result = new Aggregation(this);
        if (result.field) {
            result.field = handler(result.field);
        }
        result.groups = result.groups?.map(({ field, operation }) => ({
            field: handler(field),
            operation,
        }));
        return result;
    }
    createSummaries(records, timezone) {
        const groupingMap = {};
        for (const record of records) {
            const group = this.createGroup(record, timezone);
            const uniqueKey = (0, object_hash_1.default)(group);
            const summary = groupingMap[uniqueKey] ?? this.createSummary(group);
            this.updateSummaryInPlace(summary, record);
            groupingMap[uniqueKey] = summary;
        }
        return Object.values(groupingMap);
    }
    formatSummaries(summaries) {
        const { operation } = this;
        return operation === 'Avg'
            ? summaries
                .filter(summary => summary.Count)
                .map(summary => ({
                group: summary.group,
                value: summary.Sum / summary.Count,
            }))
            : summaries.map(summary => ({
                group: summary.group,
                value: operation === 'Count' && !this.field ? summary.starCount : summary[operation],
            }));
    }
    createGroup(record, timezone) {
        const group = {};
        for (const { field, operation } of this.groups ?? []) {
            const groupValue = record_1.default.getFieldValue(record, field);
            group[field] = this.applyDateOperation(groupValue, operation, timezone);
        }
        return group;
    }
    createSummary(group) {
        return {
            group,
            starCount: 0,
            Count: 0,
            Sum: 0,
            Min: undefined,
            Max: undefined,
        };
    }
    updateSummaryInPlace(summary, record) {
        summary.starCount += 1; // i.e: count(*)
        if (this.field) {
            const value = record_1.default.getFieldValue(record, this.field);
            if (value !== undefined && value !== null) {
                const { Min: min, Max: max } = summary;
                summary.Count += 1; // i.e: count(column)
                if (min === undefined || value < min)
                    summary.Min = value;
                if (max === undefined || value > max)
                    summary.Max = value;
            }
            if (typeof value === 'number' && !Number.isNaN(value)) {
                summary.Sum += value;
            }
        }
    }
    applyDateOperation(value, operation, timezone) {
        if (operation) {
            const dateTime = luxon_1.DateTime.fromISO(value).setZone(timezone);
            if (operation === 'Year') {
                return dateTime.toFormat('yyyy-01-01');
            }
            if (operation === 'Month') {
                return dateTime.toFormat('yyyy-LL-01');
            }
            if (operation === 'Day') {
                return dateTime.toFormat('yyyy-LL-dd');
            }
            if (operation === 'Week') {
                return dateTime.startOf('week').toFormat('yyyy-LL-dd');
            }
        }
        return value;
    }
}
exports.default = Aggregation;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdncmVnYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvaW50ZXJmYWNlcy9xdWVyeS9hZ2dyZWdhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGlDQUFpQztBQUNqQyw4REFBcUM7QUFFckMsOERBQXNDO0FBQ3RDLGdFQUE2QztBQTZCN0MsTUFBcUIsV0FBVztJQUs5QixJQUFJLFVBQVU7UUFDWixNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQztRQUMvQixNQUFNLGVBQWUsR0FBRyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVyRixPQUFPLElBQUksb0JBQVUsQ0FBQyxHQUFHLGVBQWUsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRCxZQUFZLFVBQThCO1FBQ3hDLElBQUksQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQztRQUM5QixJQUFJLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUM7UUFDdEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDO0lBQ2xDLENBQUM7SUFFRCxLQUFLLENBQUMsT0FBcUIsRUFBRSxRQUFnQixFQUFFLEtBQWM7UUFDM0QsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBRTNFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUU7WUFDbkIsSUFBSSxFQUFFLENBQUMsS0FBSyxLQUFLLEVBQUUsQ0FBQyxLQUFLO2dCQUFFLE9B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