import Filter, { FilterComponents, PlainFilter } from './unpaginated';
import Page, { PlainPage } from '../page';
import Sort, { PlainSortClause } from '../sort';
export type PaginatedFilterComponents = FilterComponents & {
    sort?: Sort;
    page?: Page;
};
export type PlainPaginatedFilter = PlainFilter & {
    sort?: Array<PlainSortClause>;
    page?: PlainPage;
};
export default class PaginatedFilter extends Filter {
    sort?: Sort;
    page?: Page;
    constructor(parts: PaginatedFilterComponents);
    override(fields: PaginatedFilterComponents): PaginatedFilter;
    nest(prefix: string): PaginatedFilter;
}
//# sourceMappingURL=paginated.d.ts.map