"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const rules_1 = require("./rules");
const type_getter_1 = __importDefault(require("./type-getter"));
const errors_1 = require("../errors");
class FieldValidator {
    static validate(collection, field, values) {
        const dotIndex = field.indexOf(':');
        if (dotIndex === -1) {
            const schema = collection.schema.fields[field];
            if (!schema) {
                throw new errors_1.ValidationError(`Column not found: '${collection.name}.${field}'`);
            }
            if (schema.type !== 'Column') {
                throw new errors_1.ValidationError(`Unexpected field type: '${collection.name}.${field}' ` +
                    `(found '${schema.type}' expected '${'Column'}')`);
            }
            if (values !== undefined) {
                values.forEach(value => FieldValidator.validateValue(field, schema, value));
            }
        }
        else {
            const prefix = field.substring(0, dotIndex);
            const schema = collection.schema.fields[prefix];
            if (!schema) {
                throw new errors_1.ValidationError(`Relation not found: '${collection.name}.${prefix}'`);
            }
            if (schema.type !== 'ManyToOne' && schema.type !== 'OneToOne') {
                throw new errors_1.ValidationError(`Unexpected field type: '${collection.name}.${prefix}' (found ` +
                    `'${schema.type}' expected '${'ManyToOne'}' or '${'OneToOne'}')`);
            }
            const suffix = field.substring(dotIndex + 1);
            const association = collection.dataSource.getCollection(schema.foreignCollection);
            FieldValidator.validate(association, suffix, values);
        }
    }
    static validateValueForId(field, schema, value) {
        FieldValidator.validateValue(field, schema, value, [schema.columnType]);
    }
    static validateValue(field, schema, value, allowedTypes = rules_1.MAP_ALLOWED_TYPES_FOR_COLUMN_TYPE[schema.columnType]) {
        // FIXME: handle complex type from ColumnType
        if (typeof schema.columnType !== 'string') {
            return;
        }
        const type = type_getter_1.default.get(value, schema.columnType);
        if (!allowedTypes?.includes(type)) {
            throw new errors_1.ValidationError(`The given value has a wrong type for "${field}": ${value}.\n Expects ${JSON.stringify(allowedTypes).slice(1, -1)}`);
        }
        if (value && schema.columnType === 'Enum') {
            FieldValidator.checkEnumValue(schema, value);
        }
    }
    static checkEnumValue(columnSchema, enumValue) {
        const isEnumAllowed = columnSchema.enumValues.includes(enumValue);
        if (!isEnumAllowed) {
            throw new errors_1.ValidationError(`The given enum value(s) ${enumValue} is not listed in [${columnSchema.enumValues}]`);
        }
    }
}
exports.default = FieldValidator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdmFsaWRhdGlvbi9maWVsZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLG1DQUE0RDtBQUM1RCxnRUFBdUM7QUFDdkMsc0NBQTRDO0FBSTVDLE1BQXFCLGNBQWM7SUFDakMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFzQixFQUFFLEtBQWEsRUFBRSxNQUFrQjtRQUN2RSxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXBDLElBQUksUUFBUSxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ25CLE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRS9DLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ1gsTUFBTSxJQUFJLHdCQUFlLENBQUMsc0JBQXNCLFVBQVUsQ0FBQyxJQUFJLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQzthQUM5RTtZQUVELElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxRQUFRLEVBQUU7Z0JBQzVCLE1BQU0sSUFBSSx3QkFBZSxDQUN2QiwyQkFBMkIsVUFBVSxDQUFDLElBQUksSUFBSSxLQUFLLElBQUk7b0JBQ3JELFdBQVcsTUFBTSxDQUFDLElBQUksZUFBZSxRQUFRLElBQUksQ0FDcEQsQ0FBQzthQUNIO1lBRUQsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO2dCQUN4QixNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7YUFDN0U7U0FDRjthQUFNO1lBQ0wsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDNUMsTUFBTSxNQUFNLEdBQUcsVUFB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