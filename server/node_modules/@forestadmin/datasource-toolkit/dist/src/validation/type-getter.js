"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const luxon_1 = require("luxon");
const uuid_1 = require("uuid");
class TypeGetter {
    static get(value, typeContext) {
        if (typeContext === 'Json')
            return 'Json';
        if (typeof value === 'string')
            return TypeGetter.getTypeFromString(value, typeContext);
        if (typeof value === 'number' && !Number.isNaN(Number(value)))
            return 'Number';
        if (value instanceof Date && luxon_1.DateTime.fromJSDate(value).isValid)
            return 'Date';
        if (typeof value === 'boolean')
            return 'Boolean';
        if (value === null || value === undefined)
            return null;
        return undefined;
    }
    static getDateType(value) {
        const dateTime = luxon_1.DateTime.fromISO(value);
        if (dateTime.toISODate() === value)
            return 'Dateonly';
        if (dateTime.toISOTime().match(value))
            return 'Timeonly';
        return 'Date';
    }
    static getTypeFromString(value, typeContext) {
        if (['Enum', 'String'].includes(typeContext))
            return typeContext;
        if ((0, uuid_1.validate)(value))
            return 'Uuid';
        if (TypeGetter.isValidDate(value))
            return TypeGetter.getDateType(value);
        if (TypeGetter.isPoint(value, typeContext))
            return 'Point';
        return 'String';
    }
    static isValidDate(value) {
        return luxon_1.DateTime.fromISO(value).isValid;
    }
    static isPoint(value, typeContext) {
        const potentialPoint = value.split(',');
        return (potentialPoint.length === 2 &&
            typeContext === 'Point' &&
            potentialPoint.every(point => TypeGetter.get(Number(point), 'Number') === 'Number'));
    }
}
exports.default = TypeGetter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZS1nZXR0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdmFsaWRhdGlvbi90eXBlLWdldHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUFpQztBQUNqQywrQkFBZ0Q7QUFJaEQsTUFBcUIsVUFBVTtJQUM3QixNQUFNLENBQUMsR0FBRyxDQUFDLEtBQWMsRUFBRSxXQUEyQjtRQUNwRCxJQUFJLFdBQVcsS0FBSyxNQUFNO1lBQUUsT0FBTyxNQUFNLENBQUM7UUFFMUMsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRO1lBQUUsT0FBTyxVQUFVLENBQUMsaUJBQWlCLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBRXZGLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFBRSxPQUFPLFFBQVEsQ0FBQztRQUUvRSxJQUFJLEtBQUssWUFBWSxJQUFJLElBQUksZ0JBQVEsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTztZQUFFLE9BQU8sTUFBTSxDQUFDO1FBRS9FLElBQUksT0FBTyxLQUFLLEtBQUssU0FBUztZQUFFLE9BQU8sU0FBUyxDQUFDO1FBRWpELElBQUksS0FBSyxLQUFLLElBQUksSUFBSSxLQUFLLEtBQUssU0FBUztZQUFFLE9BQU8sSUFBSSxDQUFDO1FBRXZELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFTyxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQWE7UUFDdEMsTUFBTSxRQUFRLEdBQUcsZ0JBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFekMsSUFBSSxRQUFRLENBQUMsU0FBUyxFQUFFLEtBQUssS0FBSztZQUFFLE9BQU8sVUFBVSxDQUFDO1FBRXRELElBQUksUUFBUSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7WUFBRSxPQUFPLFVBQVUsQ0FBQztRQUV6RCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRU8sTUFBTSxDQUFDLGlCQUFpQixDQUFDLEtBQWEsRUFBRSxXQUEyQjtRQUN6RSxJQUFJLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUM7WUFBRSxPQUFPLFdBQVcsQ0FBQztRQUVqRSxJQUFJLElBQUEsZUFBWSxFQUFDLEtBQUssQ0FBQztZQUFFLE9BQU8sTUFBTSxDQUFDO1FBRXZDLElBQUksVUFBVSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7WUFBRSxPQUFPLFVBQVUsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFeEUsSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxXQUFXLENBQUM7WUFBRSxPQUFPLE9BQU8sQ0FBQztRQUUzRCxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0lBRU8sTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFhO1FBQ3RDLE9BQU8sZ0JBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDO0lBQ3pDLENBQUM7SUFFTyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQWEsRUFBRSxXQUEyQjtRQUMvRCxNQUFNLGNBQWMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXhDLE9BQU8sQ0FDTCxjQUFjLENBQUMsTUFBTSxLQUFLLENBQUM7WUFDM0IsV0FBVyxLQUFLLE9BQU87WUFDdkIsY0FBYyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLFFBQVEsQ0FBQyxLQUFLLFFBQVEsQ0FBQyxDQUNwRixDQUFDO0lBQ0osQ0FBQztDQUNGO0FBcERELDZCQW9EQyJ9