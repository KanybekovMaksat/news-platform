"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const collection_1 = __importDefault(require("./collection"));
const schema_1 = __importDefault(require("./mongoose/schema"));
const helpers_1 = require("./utils/helpers");
const options_1 = __importDefault(require("./utils/options"));
const relations_1 = __importDefault(require("./utils/schema/relations"));
class MongooseDatasource extends datasource_toolkit_1.BaseDataSource {
    constructor(connection, options = {}, logger = null) {
        super();
        if (options && !options.flattenMode) {
            logger?.('Warn', 'Using unspecified flattenMode. ' +
                'Please refer to the documentation to update your code:\n' +
                'https://docs.forestadmin.com/developer-guide-agents-nodejs/data-sources/provided-data-sources/mongoose');
        }
        // Create collections (with only many to one relations).
        for (const model of Object.values(connection.models)) {
            const schema = schema_1.default.fromModel(model);
            const { asFields, asModels } = options_1.default.parseOptions(model, options);
            this.addModel(model, schema, [], null, asFields, asModels);
        }
        // Add one-to-many, one-to-one and many-to-many relations.
        relations_1.default.addImplicitRelations(this.collections);
    }
    /** Create all collections for a given model */
    addModel(model, schema, stack, // current only
    prefix, // prefix that we should handle in this recursion
    asFields, // current + children
    asModels) {
        const localAsFields = asFields.filter(f => !asModels.some(i => f.startsWith(`${i}.`)));
        const localAsModels = asModels.filter(f => !asModels.some(i => f.startsWith(`${i}.`)));
        const localStack = [...stack, { prefix, asFields: localAsFields, asModels: localAsModels }];
        this.checkAsFields(schema, prefix, localAsFields);
        this.checkAsModels(schema, prefix, localAsModels);
        this.addCollection(new collection_1.default(this, model, localStack));
        for (const name of localAsModels) {
            const subPrefix = prefix ? `${prefix}.${name}` : name;
            const subAsFields = (0, helpers_1.unnest)(asFields, name);
            const subAsModels = (0, helpers_1.unnest)(asModels, name);
            this.addModel(model, schema, localStack, subPrefix, subAsFields, subAsModels);
        }
    }
    checkAsFields(schema, prefix, localAsFields) {
        const localSchema = schema.getSubSchema(prefix);
        for (const field of localAsFields) {
            const name = prefix ? `${prefix}.${field}` : field;
            if (!field.includes('.') && prefix)
                throw new Error(`asFields contains "${name}", which can't be flattened further because ` +
                    `asModels contains "${prefix}", so it is already at the root of a collection.`);
            if (!field.includes('.'))
                throw new Error(`asFields contains "${name}", which can't be flattened because it is already at ` +
                    `the root of the model.`);
            if (this.containsIntermediaryArray(localSchema, field))
                throw new Error(`asFields contains "${name}", ` +
                    `which can't be moved to the root of the model, because it is inside of an array. ` +
                    'Either add all intermediary arrays to asModels, or remove it from asFields.');
        }
    }
    checkAsModels(schema, prefix, localAsModels) {
        const localSchema = schema.getSubSchema(prefix);
        for (const field of localAsModels) {
            const name = prefix ? `${prefix}.${field}` : field;
            if (this.containsIntermediaryArray(localSchema, field))
                throw new Error(`asModels contains "${name}", ` +
                    `which can't be transformed into a model, because it is inside of an array. ` +
                    'Either add all intermediary arrays to asModels, or remove it from asModels.');
        }
    }
    /**
     * When flattening a field, or transforming a field into a model, we need to check that
     * there are no intermediary arrays. For example, if we have a schema like this:
     *  { a: [{ b: { c: String } }] } and we want to flatten a.b.c, we can't do it.
     */
    containsIntermediaryArray(schema, field) {
        let index = field.indexOf('.');
        while (index !== -1) {
            const prefix = field.substring(0, index);
            if (schema.getSubSchema(prefix).isArray)
                return true;
            index = field.indexOf('.', index + 1);
        }
        return false;
    }
}
exports.default = MongooseDatasource;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXNvdXJjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9kYXRhc291cmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsd0VBQXlFO0FBR3pFLDhEQUE4QztBQUM5QywrREFBK0M7QUFFL0MsNkNBQXlDO0FBQ3pDLDhEQUE0QztBQUM1Qyx5RUFBeUQ7QUFFekQsTUFBcUIsa0JBQW1CLFNBQVEsbUNBQWtDO0lBQ2hGLFlBQVksVUFBc0IsRUFBRSxVQUEyQixFQUFFLEVBQUUsU0FBaUIsSUFBSTtRQUN0RixLQUFLLEVBQUUsQ0FBQztRQUVSLElBQUksT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRTtZQUNuQyxNQUFNLEVBQUUsQ0FDTixNQUFNLEVBQ04saUNBQWlDO2dCQUMvQiwwREFBMEQ7Z0JBQzFELHdHQUF3RyxDQUMzRyxDQUFDO1NBQ0g7UUFFRCx3REFBd0Q7UUFDeEQsS0FBSyxNQUFNLEtBQUssSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNwRCxNQUFNLE1BQU0sR0FBRyxnQkFBYyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMvQyxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxHQUFHLGlCQUFhLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztZQUUxRSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDNUQ7UUFFRCwwREFBMEQ7UUFDMUQsbUJBQWlCLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRCwrQ0FBK0M7SUFDdkMsUUFBUSxDQUNkLEtBQXFCLEVBQ3JCLE1BQXNCLEVBQ3RCLEtBQVksRUFBRSxlQUFlO0lBQzdCLE1BQXFC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