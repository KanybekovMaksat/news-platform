"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const schema_1 = __importDefault(require("../mongoose/schema"));
class OptionsParser {
    static parseOptions(model, options) {
        const schema = schema_1.default.fromModel(model);
        switch (options.flattenMode) {
            case 'auto':
                return this.getAutoFlattenOptions(schema);
            case 'manual':
                return this.getManualFlattenOptions(schema, options, model.modelName);
            case 'none':
                return { asFields: [], asModels: [] };
            default:
                return this.getLegacyFlattenOptions(schema, options, model.modelName);
        }
    }
    static getAutoFlattenOptions(schema) {
        // Split on all arrays of objects and arrays of references.
        const asModels = schema
            .listPathsMatching((_, s) => s.isArray && (!s.isLeaf || s.schemaNode?.options?.ref))
            .sort();
        // flatten all fields which are nested
        const asFields = schema.listPathsMatching((field, pathSchema) => {
            // on veut flatten si on est Ã  plus de 1 niveau de profondeur par rapport au asModels
            const minDistance = asModels.reduce((acc, asModel) => {
                return field.startsWith(`${asModel}.`)
                    ? Math.min(acc, field.split('.').length - asModel.split('.').length)
                    : acc;
            }, field.split('.').length);
            return !asModels.includes(field) && pathSchema.isLeaf && minDistance > 1;
        });
        return { asFields, asModels };
    }
    static getManualFlattenOptions(schema, options, modelName) {
        // If the user specified either asModels or asFields for this model, we apply it.
        const asModels = (options?.flattenOptions?.[modelName]?.asModels ?? [])
            .map(f => f.replace(/:/g, '.'))
            .sort();
        const asFields = (options?.flattenOptions?.[modelName]?.asFields ?? [])
            .flatMap(item => {
            const field = (typeof item === 'string' ? item : item.field).replace(/:/g, '.');
            const level = typeof item === 'string' ? 99 : item.level;
            const subSchema = schema.getSubSchema(field);
            return subSchema.isLeaf ? [field] : subSchema.listFields(level).map(f => `${field}.${f}`);
        })
            .filter(f => !asModels.includes(f)) // asModels takes precedence over asFields
            .sort(); // sort so that subfields appear after their parent
        return { asFields, asModels };
    }
    static getLegacyFlattenOptions(schema, options, modelName) {
        let asFields;
        let asModels;
        if (options?.asModels?.[modelName]) {
            // [legacy mode] retro-compatibility when customer provided asModels
            const cuts = new Set(options.asModels[modelName].map(f => f.replace(/:/g, '.')));
            for (let field of cuts) {
                while (field.lastIndexOf('.') !== -1) {
                    field = field.substring(0, field.lastIndexOf('.'));
                    cuts.add(field);
                }
            }
            asFields = [];
            asModels = [...cuts].sort();
        }
        else {
            // [legacy mode] retro-compatibility when customer did not provice anything
            asFields = [];
            asModels = Object.keys(schema.fields)
                .filter(field => schema.fields[field]?.['[]']?.options?.ref)
                .sort();
        }
        return { asFields, asModels };
    }
}
exports.default = OptionsParser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9vcHRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsZ0VBQWdEO0FBUWhELE1BQXFCLGFBQWE7SUFDaEMsTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUFxQixFQUFFLE9BQXdCO1FBQ2pFLE1BQU0sTUFBTSxHQUFHLGdCQUFjLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRS9DLFFBQVEsT0FBTyxDQUFDLFdBQVcsRUFBRTtZQUMzQixLQUFLLE1BQU07Z0JBQ1QsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDNUMsS0FBSyxRQUFRO2dCQUNYLE9BQU8sSUFBSSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3hFLEtBQUssTUFBTTtnQkFDVCxPQUFPLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLENBQUM7WUFDeEM7Z0JBQ0UsT0FBTyxJQUFJLENBQUMsdUJBQXVCLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDekU7SUFDSCxDQUFDO0lBRU8sTUFBTSxDQUFDLHFCQUFxQixDQUFDLE1BQXNCO1FBQ3pELDJEQUEyRDtRQUMzRCxNQUFNLFFBQVEsR0FBRyxNQUFNO2FBQ3BCLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsVUFBVSxFQUFFLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQzthQUNuRixJQUFJLEVBQUUsQ0FBQztRQUVWLHNDQUFzQztRQUN0QyxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsaUJB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