"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose_1 = require("mongoose");
const filter_operators_1 = __importDefault(require("./filter-operators"));
const schema_1 = __importDefault(require("../../mongoose/schema"));
const helpers_1 = require("../helpers");
const version_manager_1 = __importDefault(require("../version-manager"));
/** Generate forest admin schema from mongoose schema */
class FieldsGenerator {
    static buildFieldsSchema(model, stack = [{ prefix: null, asFields: [], asModels: [] }]) {
        const ourSchema = {};
        const childSchema = schema_1.default.fromModel(model).applyStack(stack);
        // Add columns and many to one relations
        for (const [name, field] of Object.entries(childSchema.fields)) {
            if (name !== 'parent') {
                ourSchema[name] = this.buildColumnSchema(field);
                if (field instanceof mongoose_1.SchemaType && field.options.ref)
                    ourSchema[`${name}__manyToOne`] = this.buildManyToOne(field.options.ref, name);
            }
        }
        // When a prefix is used add pk + fk + many to one relation to the parent.
        if (stack.length > 1) {
            const parentPrefix = stack[stack.length - 2].prefix;
            ourSchema._id = this.buildVirtualPrimaryKey();
            ourSchema.parentId = {
                ...this.buildColumnSchema(childSchema.fields.parent._id),
                isPrimaryKey: false,
                validation: [{ operator: 'Present' }],
            };
            ourSchema.parent = this.buildManyToOne((0, helpers_1.escape)(parentPrefix !== null ? `${model.modelName}.${parentPrefix}` : model.modelName), 'parentId');
        }
        return ourSchema;
    }
    /** Fake primary key that will be used when we're flattening collections */
    static buildVirtualPrimaryKey() {
        return {
            type: 'Column',
            columnType: 'String',
            filterOperators: filter_operators_1.default.getSupportedOperators('String'),
            isPrimaryKey: true,
            isReadOnly: true,
            isSortable: true,
        };
    }
    static buildManyToOne(collection, foreignKey) {
        return {
            type: 'ManyToOne',
            foreignCollection: collection,
            foreignKey,
            foreignKeyTarget: '_id',
        };
    }
    /** Build ColumnSchema from CleanSchema */
    static buildColumnSchema(field) {
        const columnType = this.getColumnType(field);
        const schema = {
            columnType,
            filterOperators: filter_operators_1.default.getSupportedOperators(columnType),
            defaultValue: field.options?.default,
            isPrimaryKey: field.path === '_id',
            isReadOnly: !!field.options?.immutable,
            isSortable: !(columnType instanceof Object || columnType === 'Json'),
            type: 'Column',
            validation: field.isRequired ? [{ operator: 'Present' }] : null,
        };
        if (columnType === 'Enum') {
            schema.enumValues = this.getEnumValues(field);
        }
        return schema;
    }
    /** Compute column type from CleanSchema */
    static getColumnType(field) {
        const columnType = this.getColumnTypeRec(field);
        // Enum fields are promoted to enum instead of string _only_ if they are at the root of the
        // record.
        if (columnType === 'String') {
            const enumValues = this.getEnumValues(field);
            if (enumValues && enumValues.every(v => typeof v === 'string')) {
                return 'Enum';
            }
        }
        return columnType;
    }
    /** Build ColumnType from CleanSchema recursively */
    static getColumnTypeRec(field) {
        if (field instanceof mongoose_1.SchemaType) {
            if (['String', 'Number', 'Date', 'Boolean'].includes(field.instance)) {
                return field.instance;
            }
            if ([version_manager_1.default.ObjectIdTypeName, 'Buffer', 'Decimal128'].includes(field.instance)) {
                return 'String';
            }
            return 'Json';
        }
        if (field['[]']) {
            return [this.getColumnTypeRec(field['[]'])];
        }
        return Object.entries(field).reduce((memo, [name, subSchema]) => ({ ...memo, [name]: this.getColumnTypeRec(subSchema) }), {});
    }
    /** Get enum validator from field definition */
    static getEnumValues(field) {
        return field.options?.enum instanceof Array ? field.options.enum : field.options?.enum?.values;
    }
}
exports.default = FieldsGenerator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWxzL3NjaGVtYS9maWVsZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFTQSx1Q0FBNkM7QUFFN0MsMEVBQTBEO0FBQzFELG1FQUFpRjtBQUVqRix3Q0FBb0M7QUFDcEMseUVBQWdEO0FBRWhELHdEQUF3RDtBQUN4RCxNQUFxQixlQUFlO0lBQ2xDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FDdEIsS0FBcUIsRUFDckIsUUFBZSxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUU3RCxNQUFNLFNBQVMsR0FBK0IsRUFBRSxDQUFDO1FBQ2pELE1BQU0sV0FBVyxHQUFHLGdCQUFjLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV0RSx3Q0FBd0M7UUFDeEMsS0FBSyxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQzlELElBQUksSUFBSSxLQUFLLFFBQVEsRUFBRTtnQkFDckIsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDaEQsSUFBSSxLQUFLLFlBQVkscUJBQVUsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUc7b0JBQ2xELFNBQVMsQ0FBQyxHQUFHLElBQUksYUFBYSxDQUFDLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQzthQUNsRjtTQUNGO1FBRUQsMEVBQTBFO1FBQzFFLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDcEIsTUFBTSxZ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