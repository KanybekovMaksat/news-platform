"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * When using the `asModel` options, users can request/filter on the virtual _id and parentId fields
 * of children (using the generated OneToOne relation).
 *
 * As those fields are not written to mongo, they are injected here so that they can be used like
 * any other field.
 *
 * This could be also be done by preprocessing the filter, and postprocessing the records, but this
 * solution seemed simpler, at the cost of additional pipeline stages when making queries.
 *
 * Note that a projection is taken as a parameter so that only fields which are actually used are
 * injected to save resources.
 */
class VirtualFieldsGenerator {
    static addVirtual(model, stack, projection) {
        const set = {};
        for (const colonField of projection) {
            const field = colonField.replace(/:/g, '.');
            const isFromOneToOne = stack[stack.length - 1].asModels.some(f => field.startsWith(`${f}.`));
            if (isFromOneToOne) {
                set[field] = this.getPath(field);
            }
        }
        return Object.keys(set).length ? [{ $addFields: set }] : [];
    }
    static getPath(field) {
        if (field.endsWith('._id')) {
            const suffix = field.substring(0, field.length - 4);
            return { $concat: [{ $toString: '$_id' }, `.${suffix}`] };
        }
        if (field.endsWith('.parentId')) {
            if (field.split('.').length > 2) {
                // Implementing this would require us to have knowledge of the value of asModel for
                // for virtual models under the current one, which the `stack` variable does not have.
                // If the expcetion causes issues we could simply return
                // `$${field.substring(0, field.length - 9)}._id` but that would not work if the customer
                // jumped over multiple levels of nesting.
                // As this is a use case that never happens from the UI, and that can be worked around when
                // using the API, we decided to not implement it.
                throw new Error('Fetching virtual parentId deeper than 1 level is not supported.');
            }
            return '$_id';
        }
        if (field.endsWith('.content')) {
            // FIXME: we should check that this is really a leaf field because "content" can't
            // really be used as a reserved word
            return `$${field.substring(0, field.length - 8)}`;
        }
    }
}
exports.default = VirtualFieldsGenerator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlydHVhbC1maWVsZHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvcGlwZWxpbmUvdmlydHVhbC1maWVsZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFLQTs7Ozs7Ozs7Ozs7O0dBWUc7QUFDSCxNQUFxQixzQkFBc0I7SUFDekMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFxQixFQUFFLEtBQVksRUFBRSxVQUFzQjtRQUMzRSxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFFZixLQUFLLE1BQU0sVUFBVSxJQUFJLFVBQVUsRUFBRTtZQUNuQyxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztZQUM1QyxNQUFNLGNBQWMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUU3RixJQUFJLGNBQWMsRUFBRTtnQkFDbEIsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDbEM7U0FDRjtRQUVELE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzlELENBQUM7SUFFTyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQWE7UUFDbEMsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQzFCLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFFcEQsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxFQUFFLElBQUksTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDO1NBQzNEO1FBRUQsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQy9CLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUMvQixtRkFBbUY7Z0JBQ25GLHNGQUFzRjtnQkFFdEYsd0RBQXdEO2dCQUN4RCx5RkFBeUY7Z0JBQ3pGLDBDQUEwQztnQkFFMUMsMkZBQTJGO2dCQUMzRixpREFBaUQ7Z0JBRWpELE1BQU0sSUFBSSxLQUFLLENBQUMsaUVBQWlFLENBQUMsQ0FBQzthQUNwRjtZQUVELE9BQU8sTUFBTSxDQUFDO1NBQ2Y7UUFFRCxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDOUIsa0ZBQWtGO1lBQ2xGLG9DQUFvQztZQUNwQyxPQUFPLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO1NBQ25EO0lBQ0gsQ0FBQztDQUNGO0FBL0NELHlDQStDQyJ9