import { Model, SchemaType } from 'mongoose';
import { Stack } from '../types';
export type SchemaBranch = {
    [key: string]: SchemaNode;
};
export type SchemaNode = SchemaType | SchemaBranch;
export default class MongooseSchema {
    readonly isArray: boolean;
    readonly isLeaf: boolean;
    readonly fields: SchemaBranch;
    private models;
    static fromModel(model: Model<unknown>): MongooseSchema;
    get schemaNode(): SchemaNode;
    get schemaType(): SchemaType;
    constructor(models: Record<string, Model<unknown>>, fields: SchemaBranch, isArray: boolean, isLeaf: boolean);
    listPathsMatching(handle: (field: string, schema: MongooseSchema) => boolean, prefix?: string): string[];
    /**
     * List leafs and arrays up to a certain level
     * Arrays are never traversed
     */
    listFields(level?: number): string[];
    applyStack(stack: Stack, skipAsModels?: boolean): MongooseSchema;
    getSubSchema(path: string): MongooseSchema;
    /**
     * Build a tree of SchemaType from a mongoose schema.
     * This removes most complexity from using prefixes, nested schemas and array types
     */
    private static buildFields;
}
//# sourceMappingURL=schema.d.ts.map