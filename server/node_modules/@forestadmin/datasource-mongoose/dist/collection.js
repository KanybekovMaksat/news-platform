"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const mongoose_1 = require("mongoose");
const schema_1 = __importDefault(require("./mongoose/schema"));
const helpers_1 = require("./utils/helpers");
const filter_1 = __importDefault(require("./utils/pipeline/filter"));
const group_1 = __importDefault(require("./utils/pipeline/group"));
const lookup_1 = __importDefault(require("./utils/pipeline/lookup"));
const projection_1 = __importDefault(require("./utils/pipeline/projection"));
const reparent_1 = __importDefault(require("./utils/pipeline/reparent"));
const virtual_fields_1 = __importDefault(require("./utils/pipeline/virtual-fields"));
const fields_1 = __importDefault(require("./utils/schema/fields"));
class MongooseCollection extends datasource_toolkit_1.BaseCollection {
    constructor(dataSource, model, stack) {
        const { prefix } = stack[stack.length - 1];
        const name = prefix ? (0, helpers_1.escape)(`${model.modelName}.${prefix}`) : model.modelName;
        super(name, dataSource);
        this.model = model;
        this.stack = stack;
        this.enableCount();
        this.addFields(fields_1.default.buildFieldsSchema(model, stack));
    }
    async list(caller, filter, projection) {
        const lookupProjection = projection.union(filter.conditionTree?.projection, filter.sort?.projection);
        const records = await this.model.aggregate([
            ...this.buildBasePipeline(filter, lookupProjection),
            ...projection_1.default.project(projection),
        ]);
        return (0, helpers_1.replaceMongoTypes)(records);
    }
    async aggregate(caller, filter, aggregation, limit) {
        const lookupProjection = aggregation.projection.union(filter.conditionTree?.projection);
        const rows = await this.model.aggregate([
            ...this.buildBasePipeline(filter, lookupProjection),
            ...group_1.default.group(aggregation),
            { $sort: { value: -1 } },
            ...(limit ? [{ $limit: limit }] : []),
        ]);
        return (0, helpers_1.replaceMongoTypes)(rows);
    }
    async create(caller, data) {
        return this.handleValidationError(() => this._create(caller, data));
    }
    async update(caller, filter, patch) {
        return this.handleValidationError(() => this._update(caller, filter, patch));
    }
    async delete(caller, filter) {
        return this.handleValidationError(() => this._delete(caller, filter));
    }
    async _create(caller, flatData) {
        const { asFields } = this.stack[this.stack.length - 1];
        const data = flatData.map(fd => (0, helpers_1.unflattenRecord)(fd, asFields));
        // For root models, we can simply insert the records.
        if (this.stack.length < 2) {
            const { insertedIds } = await this.model.insertMany(data, { rawResult: true });
            return flatData.map((record, index) => ({
                _id: (0, helpers_1.replaceMongoTypes)(insertedIds[index]),
                ...record,
            }));
        }
        // Only array fields can create subdocuments (the others should use update)
        const schema = schema_1.default.fromModel(this.model).applyStack(this.stack);
        if (!schema.isArray)
            throw new datasource_toolkit_1.ValidationError('Trying to create subrecords on a non-array field');
        // Transform list of subrecords to a list of modifications that we'll apply to the root record.
        const lastStackStep = this.stack[this.stack.length - 1];
        const fieldName = this.stack.length > 2
            ? lastStackStep.prefix.substring(this.stack[this.stack.length - 2].prefix.length + 1)
            : lastStackStep.prefix;
        const updates = {};
        const results = [];
        for (const record of data) {
            const { parentId, ...rest } = record;
            if (!parentId)
                throw new datasource_toolkit_1.ValidationError('Trying to create a subrecord with no parent');
            const [rootId, path] = (0, helpers_1.splitId)(`${parentId}.${fieldName}`);
            const rootIdString = String(rootId);
            if (!updates[rootIdString])
                updates[rootIdString] = { rootId, path, records: [] };
            // unwrap 'content' on leafs
            updates[rootIdString].records.push(schema.isLeaf ? rest.content : rest);
            results.push({
                _id: `${rootId}.${path}.${updates[rootIdString].records.length - 1}`,
                ...record,
            });
        }
        // Apply the modifications to the root document.
        const promises = Object.values(updates).map(({ rootId, path, records }) => this.model.updateOne({ _id: rootId }, { $push: { [path]: { $position: 0, $each: records } } }));
        await Promise.all(promises);
        return results;
    }
    async _update(caller, filter, flatPatch) {
        const { asFields } = this.stack[this.stack.length - 1];
        const patch = (0, helpers_1.unflattenRecord)(flatPatch, asFields, true);
        // Fetch the ids of the documents OR subdocuments that will be updated.
        // We need to do that regardless of `this.prefix` because the filter may contain conditions on
        // relationships.
        const records = await this.list(caller, filter, new datasource_toolkit_1.Projection('_id'));
        const ids = records.map(record => record._id);
        if (this.stack.length < 2) {
            // We are updating a real document, we can delegate the work to mongoose directly.
            await (ids.length > 1
                ? this.model.updateMany({ _id: ids }, patch, { rawResult: true })
                : this.model.updateOne({ _id: ids }, patch, { rawResult: true }));
        }
        else if (patch.parentId && ids.some(id => !id.startsWith(patch.parentId))) {
            // When we update subdocuments, we need to make sure that the new parent is the same as the
            // old one: reparenting is not supported.
            throw new datasource_toolkit_1.ValidationError(`'${this.name}' is virtual: records cannot be reparented.`);
        }
        else {
            // We are updating a subdocument (this.prefix is set).
            // This method can be called from customer code, so we need to handle the case where we are
            // updating many documents at once (the GUI only allows to update documents one by one).
            // This is trivial when using the flattener on simple objects, but becomes more convoluted
            // when using arrays: we need to update the right element of the array in each document.
            // For performance reasons we group the ids by path (which contain the indexes of the
            // potentially nested arrays) instead of performing one update per doc.
            // Also note, that when we are using a single field as a model, an extra level of nesting is
            // added (this is common when using the flattener to create many to many relationships)
            const { isLeaf } = schema_1.default.fromModel(this.model).applyStack(this.stack);
            // `idsByPath` contains one entry if using the flattener in object-mode, but potentially many
            // if using the flattener in array-mode.
            const idsByPath = (0, helpers_1.groupIdsByPath)(ids);
            // Perform the updates.
            const promises = Object.entries(idsByPath).map(([path, rootIds]) => {
                // When using object-mode flattener, path == this.prefix.
                // When using array-mode flattener, path == this.prefix + '.0' (or '.1', etc).
                // (Both can be used at the same time as this is a recursive process).
                const subdocPatch = (0, helpers_1.buildSubdocumentPatch)(path, patch, isLeaf);
                if (!Object.keys(subdocPatch).length)
                    return null;
                return ids.length > 1
                    ? this.model.updateMany({ _id: rootIds }, subdocPatch, { rawResult: true })
                    : this.model.updateOne({ _id: rootIds }, subdocPatch, { rawResult: true });
            });
            await Promise.all(promises);
        }
    }
    async _delete(caller, filter) {
        const records = await this.list(caller, filter, new datasource_toolkit_1.Projection('_id'));
        const ids = records.map(record => record._id);
        if (this.stack.length < 2) {
            await this.model.deleteMany({ _id: ids }, { rawResult: true });
            return;
        }
        const schema = schema_1.default.fromModel(this.model).applyStack(this.stack);
        const idsByPath = (0, helpers_1.groupIdsByPath)(ids);
        if (schema.isArray) {
            // Iterate paths in reverse order so that when we delete elements from arrays, the indexes
            // of the next elements that we'll touch don't change.
            for (const path of Object.keys(idsByPath).sort(helpers_1.compareIds).reverse()) {
                const arrayPath = path.substring(0, path.lastIndexOf('.'));
                const index = Number(path.substring(path.lastIndexOf('.') + 1));
                // There is no update operator to pop items out of arrays at known positions
                // => we use an aggregation pipeline in the update operation
                // @see https://jira.mongodb.org/browse/SERVER-1014?focusedCommentId=2305681#comment-2305681
                const newArrayValue = [
                    { $slice: [`$${arrayPath}`, index] },
                    { $slice: [`$${arrayPath}`, index + 1, { $size: `$${arrayPath}` }] },
                ];
                // When updating arrays, indexes will change with each request so we need to perform the
                // request sequentially.
                // eslint-disable-next-line no-await-in-loop
                await this.model.collection.updateMany({ _id: { $in: idsByPath[path] } }, [{ $set: { [arrayPath]: { $concatArrays: newArrayValue } } }], {});
            }
        }
        else {
            const promises = Object.entries(idsByPath).map(([path, pathIds]) => this.model.collection.updateMany({ _id: { $in: pathIds } }, { $unset: { [path]: '' } }, {}));
            await Promise.all(promises);
        }
    }
    buildBasePipeline(filter, lookupProjection) {
        return [
            ...reparent_1.default.reparent(this.model, this.stack),
            ...virtual_fields_1.default.addVirtual(this.model, this.stack, lookupProjection),
            ...lookup_1.default.lookup(this.model, this.stack, lookupProjection),
            ...filter_1.default.filter(this.model, this.stack, filter),
        ];
    }
    async handleValidationError(callback) {
        try {
            // Do not remove the await here, it's important!
            return await callback();
        }
        catch (error) {
            if (error instanceof mongoose_1.Error.ValidationError) {
                throw new datasource_toolkit_1.ValidationError(error.message);
            }
            throw error;
        }
    }
}
exports.default = MongooseCollection;
//# sourceMappingURL=data:application/json;base64,