import { Client } from 'openid-client';
import AuthService from './auth';
import { UserInfo } from './auth/types';
import ChartHandler from './charts/chart-handler';
import IpWhiteListService from './ip-whitelist';
import { IpWhitelistConfiguration } from './ip-whitelist/types';
import RenderingPermissionService from './permissions/rendering-permission';
import { RawTree } from './permissions/types';
import SchemaService from './schema';
import { ForestSchema } from './schema/types';
import { ForestAdminClient, ForestAdminClientOptionsWithDefaults, PermissionService } from './types';
import ContextVariablesInstantiator from './utils/context-variables-instantiator';
export default class ForestAdminClientWithCache implements ForestAdminClient {
    protected readonly options: ForestAdminClientOptionsWithDefaults;
    readonly permissionService: PermissionService;
    protected readonly renderingPermissionService: RenderingPermissionService;
    readonly contextVariablesInstantiator: ContextVariablesInstantiator;
    readonly chartHandler: ChartHandler;
    protected readonly ipWhitelistService: IpWhiteListService;
    protected readonly schemaService: SchemaService;
    protected readonly authService: AuthService;
    constructor(options: ForestAdminClientOptionsWithDefaults, permissionService: PermissionService, renderingPermissionService: RenderingPermissionService, contextVariablesInstantiator: ContextVariablesInstantiator, chartHandler: ChartHandler, ipWhitelistService: IpWhiteListService, schemaService: SchemaService, authService: AuthService);
    verifySignedActionParameters<TSignedParameters>(signedParameters: string): TSignedParameters;
    getIpWhitelistConfiguration(): Promise<IpWhitelistConfiguration>;
    postSchema(schema: ForestSchema): Promise<boolean>;
    getOpenIdClient(): Promise<Client>;
    getUserInfo(renderingId: number, accessToken: string): Promise<UserInfo>;
    getScope({ renderingId, userId, collectionName, }: {
        renderingId: number | string;
        userId: number | string;
        collectionName: string;
    }): Promise<RawTree>;
    markScopesAsUpdated(renderingId: number | string): void;
}
//# sourceMappingURL=forest-admin-client-with-cache.d.ts.map