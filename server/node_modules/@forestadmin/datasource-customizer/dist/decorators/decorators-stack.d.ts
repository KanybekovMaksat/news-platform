import { DataSource, Logger } from '@forestadmin/datasource-toolkit';
import ActionCollectionDecorator from './actions/collection';
import ChartDataSourceDecorator from './chart/datasource';
import ComputedCollectionDecorator from './computed/collection';
import DataSourceDecorator from './datasource-decorator';
import HookCollectionDecorator from './hook/collection';
import OperatorsEmulateCollectionDecorator from './operators-emulate/collection';
import PublicationFieldCollectionDecorator from './publication-field/collection';
import RelationCollectionDecorator from './relation/collection';
import RenameFieldCollectionDecorator from './rename-field/collection';
import SchemaCollectionDecorator from './schema/collection';
import SearchCollectionDecorator from './search/collection';
import SegmentCollectionDecorator from './segment/collection';
import SortEmulateCollectionDecorator from './sort-emulate/collection';
import ValidationCollectionDecorator from './validation/collection';
import WriteDataSourceDecorator from './write/datasource';
export default class DecoratorsStack {
    action: DataSourceDecorator<ActionCollectionDecorator>;
    chart: ChartDataSourceDecorator;
    earlyComputed: DataSourceDecorator<ComputedCollectionDecorator>;
    earlyOpEmulate: DataSourceDecorator<OperatorsEmulateCollectionDecorator>;
    relation: DataSourceDecorator<RelationCollectionDecorator>;
    lateComputed: DataSourceDecorator<ComputedCollectionDecorator>;
    lateOpEmulate: DataSourceDecorator<OperatorsEmulateCollectionDecorator>;
    publication: DataSourceDecorator<PublicationFieldCollectionDecorator>;
    renameField: DataSourceDecorator<RenameFieldCollectionDecorator>;
    schema: DataSourceDecorator<SchemaCollectionDecorator>;
    search: DataSourceDecorator<SearchCollectionDecorator>;
    segment: DataSourceDecorator<SegmentCollectionDecorator>;
    sortEmulate: DataSourceDecorator<SortEmulateCollectionDecorator>;
    validation: DataSourceDecorator<ValidationCollectionDecorator>;
    write: WriteDataSourceDecorator;
    hook: DataSourceDecorator<HookCollectionDecorator>;
    dataSource: DataSource;
    private customizations;
    constructor(dataSource: DataSource);
    queueCustomization(customization: (logger: Logger) => Promise<void>): void;
    /**
     * Apply all customizations
     * Plugins may queue new customizations, or call other plugins which will queue customizations.
     *
     * This method will be called recursively and clears the queue at each recursion to ensure
     * that all customizations are applied in the right order.
     */
    applyQueuedCustomizations(logger: Logger): Promise<void>;
}
//# sourceMappingURL=decorators-stack.d.ts.map