"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const collection_decorator_1 = __importDefault(require("../collection-decorator"));
/**
 * Avoid performing useless database requests:
 * Using segments + scopes + filters + jointure emulation often yields requests which have
 * mutually exclusive conditions or empty "In" leafs.
 */
class EmptyCollectionDecorator extends collection_decorator_1.default {
    async list(caller, filter, projection) {
        if (!this.returnsEmptySet(filter.conditionTree)) {
            return super.list(caller, filter, projection);
        }
        return [];
    }
    async update(caller, filter, patch) {
        if (!this.returnsEmptySet(filter.conditionTree)) {
            return super.update(caller, filter, patch);
        }
    }
    async delete(caller, filter) {
        if (!this.returnsEmptySet(filter.conditionTree)) {
            return super.delete(caller, filter);
        }
    }
    async aggregate(caller, filter, aggregation, limit) {
        if (!this.returnsEmptySet(filter.conditionTree)) {
            return super.aggregate(caller, filter, aggregation, limit);
        }
        return [];
    }
    returnsEmptySet(tree) {
        if (tree instanceof datasource_toolkit_1.ConditionTreeLeaf) {
            return this.leafReturnsEmptySet(tree);
        }
        if (tree instanceof datasource_toolkit_1.ConditionTreeBranch && tree.aggregator === 'Or') {
            return this.orReturnsEmptySet(tree.conditions);
        }
        if (tree instanceof datasource_toolkit_1.ConditionTreeBranch && tree.aggregator === 'And') {
            return this.andReturnsEmptySet(tree.conditions);
        }
        return false;
    }
    leafReturnsEmptySet(leaf) {
        // Empty 'in` always return zero records.
        return leaf.operator === 'In' && leaf.value.length === 0;
    }
    orReturnsEmptySet(conditions) {
        // Or return no records when
        // - they have no conditions
        // - they have only conditions which return zero records.
        return conditions.length === 0 || conditions.every(c => this.returnsEmptySet(c));
    }
    andReturnsEmptySet(conditions) {
        // There is a leaf which returns zero records
        if (conditions.some(c => this.returnsEmptySet(c))) {
            return true;
        }
        // Scans for mutually exclusive conditions
        // (this a naive implementation, it will miss many occurences)
        const valuesByField = {};
        const leafs = conditions.filter(condition => condition instanceof datasource_toolkit_1.ConditionTreeLeaf);
        for (const { field, operator, value } of leafs) {
            if (!valuesByField[field] && operator === 'Equal') {
                valuesByField[field] = [value];
            }
            else if (!valuesByField[field] && operator === 'In') {
                valuesByField[field] = value;
            }
            else if (valuesByField[field] && operator === 'Equal') {
                valuesByField[field] = valuesByField[field].includes(value) ? [value] : [];
            }
            else if (valuesByField[field] && operator === 'In') {
                valuesByField[field] = valuesByField[field].filter(v => value.includes(v));
            }
        }
        return Object.values(valuesByField).some(v => v.length === 0);
    }
}
exports.default = EmptyCollectionDecorator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZWNvcmF0b3JzL2VtcHR5L2NvbGxlY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx3RUFXeUM7QUFFekMsbUZBQTBEO0FBRTFEOzs7O0dBSUc7QUFDSCxNQUFxQix3QkFBeUIsU0FBUSw4QkFBbUI7SUFDOUQsS0FBSyxDQUFDLElBQUksQ0FDakIsTUFBYyxFQUNkLE1BQXVCLEVBQ3ZCLFVBQXNCO1FBRXRCLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUMvQyxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQztTQUMvQztRQUVELE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztJQUVRLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBYyxFQUFFLE1BQWMsRUFBRSxLQUFpQjtRQUNyRSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDL0MsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDNUM7SUFDSCxDQUFDO0lBRVEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFjLEVBQUUsTUFBYztRQUNsRCxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDL0MsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztTQUNyQztJQUNILENBQUM7SUFFUSxLQUFLLENBQUMsU0FBUyxDQUN0QixNQUFjLEVBQ2QsTUFBYyxFQUNkLFdBQXdCLEVBQ3hCLEtBQWM7UUFFZCxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMs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