import { AggregateResult, Aggregation, Caller, CollectionSchema, Filter, PaginatedFilter, Projection, RecordData } from '@forestadmin/datasource-toolkit';
import { ComputedDefinition } from './types';
import CollectionDecorator from '../collection-decorator';
import DataSourceDecorator from '../datasource-decorator';
/** Decorator injects computed fields */
export default class ComputedCollection extends CollectionDecorator {
    readonly dataSource: DataSourceDecorator<ComputedCollection>;
    protected computeds: Record<string, ComputedDefinition>;
    registerComputed(name: string, computed: ComputedDefinition): void;
    list(caller: Caller, filter: PaginatedFilter, projection: Projection): Promise<RecordData[]>;
    aggregate(caller: Caller, filter: Filter, aggregation: Aggregation, limit?: number): Promise<AggregateResult[]>;
    protected refineSchema(childSchema: CollectionSchema): CollectionSchema;
}
//# sourceMappingURL=collection.d.ts.map