"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const compute_fields_1 = __importDefault(require("./helpers/compute-fields"));
const rewrite_projection_1 = __importDefault(require("./helpers/rewrite-projection"));
const collection_context_1 = __importDefault(require("../../context/collection-context"));
const collection_decorator_1 = __importDefault(require("../collection-decorator"));
/** Decorator injects computed fields */
class ComputedCollection extends collection_decorator_1.default {
    constructor() {
        super(...arguments);
        this.computeds = {};
    }
    /** @internal */
    getComputed(path) {
        const index = path.indexOf(':');
        if (index === -1)
            return this.computeds[path];
        const { foreignCollection } = this.schema.fields[path.substring(0, index)];
        const association = this.dataSource.getCollection(foreignCollection);
        return association.getComputed(path.substring(index + 1));
    }
    registerComputed(name, computed) {
        // Check that all dependencies exist and are columns
        for (const field of computed.dependencies) {
            datasource_toolkit_1.FieldValidator.validate(this, field);
        }
        if (computed.dependencies.length <= 0) {
            throw new Error(`Computed field '${this.name}.${name}' must have at least one dependency.`);
        }
        this.computeds[name] = computed;
        this.markSchemaAsDirty();
    }
    async list(caller, filter, projection) {
        const childProjection = projection.replace(path => (0, rewrite_projection_1.default)(this, path));
        const records = await this.childCollection.list(caller, filter, childProjection);
        if (childProjection.equals(projection))
            return records;
        const context = new collection_context_1.default(this, caller);
        return (0, compute_fields_1.default)(context, this, childProjection, projection, records);
    }
    async aggregate(caller, filter, aggregation, limit) {
        // No computed are used in the aggregation => just delegate to the underlying collection.
        if (!aggregation.projection.some(field => this.getComputed(field))) {
            return this.childCollection.aggregate(caller, filter, aggregation, limit);
        }
        // Fallback to full emulation.
        return aggregation.apply(await this.list(caller, filter, aggregation.projection), caller.timezone, limit);
    }
    refineSchema(childSchema) {
        const schema = { ...childSchema, fields: { ...childSchema.fields } };
        for (const [name, computed] of Object.entries(this.computeds)) {
            schema.fields[name] = {
                columnType: computed.columnType,
                defaultValue: computed.defaultValue,
                enumValues: computed.enumValues,
                filterOperators: new Set(),
                isPrimaryKey: false,
                isReadOnly: true,
                isSortable: false,
                type: 'Column',
            };
        }
        return schema;
    }
}
exports.default = ComputedCollection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZWNvcmF0b3JzL2NvbXB1dGVkL2NvbGxlY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx3RUFXeUM7QUFFekMsOEVBQTBEO0FBQzFELHNGQUF3RDtBQUV4RCwwRkFBOEU7QUFDOUUsbUZBQTBEO0FBRzFELHdDQUF3QztBQUN4QyxNQUFxQixrQkFBbUIsU0FBUSw4QkFBbUI7SUFBbkU7O1FBRVksY0FBUyxHQUF1QyxFQUFFLENBQUM7SUE4RS9ELENBQUM7SUE1RUMsZ0JBQWdCO0lBQ2hCLFdBQVcsQ0FBQyxJQUFZO1FBQ3RCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDaEMsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDO1lBQUUsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTlDLE1BQU0sRUFBRSxpQkFBaUIsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFtQixDQUFDO1FBQzdGLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFFckUsT0FBTyxXQUFXLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVELGdCQUFnQixDQUFDLElBQVksRUFBRSxRQUE0QjtRQUN6RCxvREFBb0Q7UUFDcEQsS0FBSyxNQUFNLEtBQUssSUFBSSxRQUFRLENBQUMsWUFBWSxFQUFFO1lBQ3pDLG1DQUFjLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztTQUN0QztRQUVELElBQUksUUFBUSxD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