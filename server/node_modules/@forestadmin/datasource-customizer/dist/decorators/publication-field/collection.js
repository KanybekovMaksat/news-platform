"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const collection_decorator_1 = __importDefault(require("../collection-decorator"));
/** This decorator allows hiding fields */
class PublicationFieldCollectionDecorator extends collection_decorator_1.default {
    constructor() {
        super(...arguments);
        this.unpublished = new Set();
    }
    /** Show/hide fields from the schema */
    changeFieldVisibility(name, visible) {
        const field = this.childCollection.schema.fields[name];
        if (!field) {
            throw new Error(`No such field '${name}'`);
        }
        if (datasource_toolkit_1.SchemaUtils.isPrimaryKey(this.childCollection.schema, name)) {
            throw new Error(`Cannot hide primary key`);
        }
        if (!visible)
            this.unpublished.add(name);
        else
            this.unpublished.delete(name);
        this.markSchemaAsDirty();
    }
    async create(caller, data) {
        const records = await super.create(caller, data);
        return records.map(childRecord => {
            const record = {};
            for (const key of Object.keys(childRecord))
                if (!this.unpublished.has(key))
                    record[key] = childRecord[key];
            return record;
        });
    }
    refineSchema(childSchema) {
        const fields = {};
        for (const [name, field] of Object.entries(childSchema.fields)) {
            if (this.isPublished(name)) {
                fields[name] = field;
            }
        }
        return { ...childSchema, fields };
    }
    isPublished(name) {
        const field = this.childCollection.schema.fields[name];
        return (!this.unpublished.has(name) &&
            // Columns have no special requirements
            (field.type === 'Column' ||
                // Many to one, one to one and one to many need the foreign key to be published
                (field.type === 'ManyToOne' && this.isPublished(field.foreignKey)) ||
                ((field.type === 'OneToOne' || field.type === 'OneToMany') &&
                    this.dataSource.getCollection(field.foreignCollection).isPublished(field.originKey)) ||
                // Many to many relations depend on both foreignKey and originKey to be published
                (field.type === 'ManyToMany' &&
                    this.dataSource.getCollection(field.throughCollection).isPublished(field.foreignKey) &&
                    this.dataSource.getCollection(field.throughCollection).isPublished(field.originKey))));
    }
}
exports.default = PublicationFieldCollectionDecorator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZWNvcmF0b3JzL3B1YmxpY2F0aW9uLWZpZWxkL2NvbGxlY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx3RUFNeUM7QUFFekMsbUZBQTBEO0FBRzFELDBDQUEwQztBQUMxQyxNQUFxQixtQ0FBb0MsU0FBUSw4QkFBbUI7SUFBcEY7O1FBRW1CLGdCQUFXLEdBQWdCLElBQUksR0FBRyxFQUFFLENBQUM7SUE0RHhELENBQUM7SUExREMsdUNBQXVDO0lBQ3ZDLHFCQUFxQixDQUFDLElBQVksRUFBRSxPQUFnQjtRQUNsRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdkQsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNWLE1BQU0sSUFBSSxLQUFLLENBQUMsa0JBQWtCLElBQUksR0FBRyxDQUFDLENBQUM7U0FDNUM7UUFFRCxJQUFJLGdDQUFXLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFO1lBQy9ELE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztTQUM1QztRQUVELElBQUksQ0FBQyxPQUFPO1lBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7O1lBQ3BDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFUSxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQWMsRUFBRSxJQUFrQjtRQUN0RCxNQUFNLE9BQU8sR0FBRyxNQUFNLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRWpELE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUMvQixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7WUFDbEIsS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztnQkFDeEMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztvQkFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRWpFLE9BQU8sTUFBTSxDQUFDO1FBQ2hCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVrQixZQUFZLENBQUMsV0FBNkI7UUFDM0QsTUFBTSxNQUFNLEdBQWdDLEVBQUUsQ0FBQztRQUUvQyxLQUFLLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDOUQsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUMxQixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO2FBQ3RCO1NBQ0Y7UUFFRCxPQUFPLEVBQUUsR0FBRyxXQUFXLEVBQUUsTUFBTSxFQUFFLENBQUM7SUFDcEMsQ0FBQztJQUVPLFdBQVcsQ0FBQyxJQUFZO1FBQzlCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV2RCxPQUFPLENBQ0wsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7WUFDM0IsdUNBQXVDO1lBQ3ZDLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxRQUFRO2dCQUN0QiwrRUFBK0U7Z0JBQy9FLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxXQUFXLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQ2xFLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLFVBQVUsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLFdBQVcsQ0FBQztvQkFDeEQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDdEYsaUZBQWlGO2dCQUNqRixDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssWUFBWTtvQkFDMUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUM7b0JBQ3BGLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUMxRixDQUFDO0lBQ0osQ0FBQztDQUNGO0FBOURELHNEQThEQyJ9