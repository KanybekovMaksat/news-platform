"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const aggregate_1 = require("./context/aggregate");
const create_1 = require("./context/create");
const delete_1 = require("./context/delete");
const list_1 = require("./context/list");
const update_1 = require("./context/update");
const hook_1 = __importDefault(require("./hook"));
const collection_decorator_1 = __importDefault(require("../collection-decorator"));
class CollectionHookDecorator extends collection_decorator_1.default {
    constructor() {
        super(...arguments);
        this.hooks = {
            List: new hook_1.default(),
            Create: new hook_1.default(),
            Update: new hook_1.default(),
            Delete: new hook_1.default(),
            Aggregate: new hook_1.default(),
        };
    }
    addHook(position, type, handler) {
        this.hooks[type].addHandler(position, handler);
    }
    async create(caller, data) {
        const beforeContext = new create_1.InternalHookBeforeCreateContext(this.childCollection, caller, data);
        await this.hooks.Create.executeBefore(beforeContext);
        const records = await this.childCollection.create(caller, beforeContext.getData());
        const afterContext = new create_1.HookAfterCreateContext(this.childCollection, caller, data, records);
        await this.hooks.Create.executeAfter(afterContext);
        return records;
    }
    async list(caller, filter, projection) {
        const beforeContext = new list_1.InternalHookBeforeListContext(this.childCollection, caller, filter, projection);
        await this.hooks.List.executeBefore(beforeContext);
        const records = await this.childCollection.list(caller, beforeContext.getFilter(), beforeContext.getProjection());
        const afterContext = new list_1.HookAfterListContext(this.childCollection, caller, filter, projection, records);
        await this.hooks.List.executeAfter(afterContext);
        return records;
    }
    async update(caller, filter, patch) {
        const beforeContext = new update_1.InternalHookBeforeUpdateContext(this.childCollection, caller, filter, patch);
        await this.hooks.Update.executeBefore(beforeContext);
        await this.childCollection.update(caller, beforeContext.getFilter(), beforeContext.patch);
        const afterContext = new update_1.HookAfterUpdateContext(this.childCollection, caller, filter, patch);
        await this.hooks.Update.executeAfter(afterContext);
    }
    async delete(caller, filter) {
        const beforeContext = new delete_1.InternalHookBeforeDeleteContext(this.childCollection, caller, filter);
        await this.hooks.Delete.executeBefore(beforeContext);
        await this.childCollection.delete(caller, beforeContext.getFilter());
        const afterContext = new delete_1.HookAfterDeleteContext(this.childCollection, caller, filter);
        await this.hooks.Delete.executeAfter(afterContext);
    }
    async aggregate(caller, filter, aggregation, limit) {
        const beforeContext = new aggregate_1.InternalHookBeforeAggregateContext(this.childCollection, caller, filter, aggregation, limit);
        await this.hooks.Aggregate.executeBefore(beforeContext);
        const aggregationResult = await this.childCollection.aggregate(caller, beforeContext.getFilter(), beforeContext.getAggregation(), beforeContext.limit);
        const afterContext = new aggregate_1.HookAfterAggregateContext(this.childCollection, caller, filter, aggregation, aggregationResult, limit);
        await this.hooks.Aggregate.executeAfter(afterContext);
        return aggregationResult;
    }
}
exports.default = CollectionHookDecorator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZWNvcmF0b3JzL2hvb2svY29sbGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQVVBLG1EQUk2QjtBQUM3Qiw2Q0FJMEI7QUFDMUIsNkNBSTBCO0FBRTFCLHlDQUl3QjtBQUN4Qiw2Q0FJMEI7QUFDMUIsa0RBQTJCO0FBRTNCLG1GQUEwRDtBQUUxRCxNQUFxQix1QkFBd0IsU0FBUSw4QkFBbUI7SUFBeEU7O1FBQ1UsVUFBSyxHQUFxRTtZQUNoRixJQUFJLEVBQUUsSUFBSSxjQUFLLEVBQStDO1lBQzlELE1BQU0sRUFBRSxJQUFJLGNBQUssRUFBbUQ7WUFDcEUsTUFBTSxFQUFFLElBQUksY0FBSyxFQUFtRDtZQUNwRSxNQUFNLEVBQUUsSUFBSSxjQUFLLEVBQW1EO1lBQ3BFLFNBQVMsRUFBRSxJQUFJLGNBQUssRUFBeUQ7U0FDOUUsQ0FBQztJQWdISixDQUFDO0lBOUdDLE9BQU8sQ0FDTCxRQUFXLEVBQ1gsSUFBTyxFQUNQLE9BQXdDO1FBRXhDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBZ0IsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsT0FBbUMsQ0FBQyxDQUFDO0lBQ3pGLENBQUM7SUFFUSxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQWMsRUFBRSxJQUFrQjtRQUN0RCxNQUFNLGFBQWEsR0FBRyxJQUFJLHdDQUErQixDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzlGLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRXJELE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBRW5GLE1BQU0sWUFBWSxHQUFH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