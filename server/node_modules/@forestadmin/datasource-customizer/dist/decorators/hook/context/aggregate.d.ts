import { Aggregation, Caller, Collection, Filter } from '@forestadmin/datasource-toolkit';
import HookContext from './hook';
import { TAggregateResult, TAggregation, TCollectionName, TFilter, TSchema } from '../../../templates';
export declare class HookBeforeAggregateContext<S extends TSchema = TSchema, N extends TCollectionName<S> = TCollectionName<S>> extends HookContext<S, N> {
    protected _filter: Filter;
    protected _aggregation: Aggregation;
    protected _limit: number;
    constructor(collection: Collection, caller: Caller, filter: Filter, aggregation: Aggregation, limit?: number);
    get filter(): Readonly<TFilter<S, N>>;
    get aggregation(): Readonly<TAggregation<S, N>>;
    get limit(): number;
}
export declare class InternalHookBeforeAggregateContext extends HookBeforeAggregateContext {
    getFilter(): Filter;
    getAggregation(): Aggregation;
}
export declare class HookAfterAggregateContext<S extends TSchema = TSchema, N extends TCollectionName<S> = TCollectionName<S>> extends HookBeforeAggregateContext<S, N> {
    private _aggregateResult;
    constructor(collection: Collection, caller: Caller, filter: Filter, aggregation: Aggregation, aggregateResult: TAggregateResult<S, N>[], limit?: number);
    get aggregateResult(): readonly TAggregateResult<S, N>[];
}
//# sourceMappingURL=aggregate.d.ts.map