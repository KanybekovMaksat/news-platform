"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const collection_context_1 = __importDefault(require("../../context/collection-context"));
const collection_decorator_1 = __importDefault(require("../collection-decorator"));
class SegmentCollectionDecorator extends collection_decorator_1.default {
    constructor() {
        super(...arguments);
        this.segments = {};
    }
    addSegment(segmentName, definition) {
        this.segments[segmentName] = definition;
        this.markSchemaAsDirty();
    }
    refineSchema(subSchema) {
        return {
            ...subSchema,
            segments: [...subSchema.segments, ...Object.keys(this.segments)],
        };
    }
    async refineFilter(caller, filter) {
        if (!filter) {
            return null;
        }
        let { conditionTree, segment } = filter;
        if (segment && this.segments[segment]) {
            const definition = this.segments[segment];
            const result = typeof definition === 'function'
                ? await definition(new collection_context_1.default(this, caller))
                : await definition;
            const conditionTreeSegment = result instanceof datasource_toolkit_1.ConditionTree ? result : datasource_toolkit_1.ConditionTreeFactory.fromPlainObject(result);
            datasource_toolkit_1.ConditionTreeValidator.validate(conditionTreeSegment, this);
            conditionTree = datasource_toolkit_1.ConditionTreeFactory.intersect(conditionTree, conditionTreeSegment);
            segment = null;
        }
        return filter.override({ conditionTree, segment });
    }
}
exports.default = SegmentCollectionDecorator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZWNvcmF0b3JzL3NlZ21lbnQvY29sbGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHdFQU95QztBQUd6QywwRkFBOEU7QUFDOUUsbUZBQTBEO0FBRTFELE1BQXFCLDBCQUEyQixTQUFRLDhCQUFtQjtJQUEzRTs7UUFDVSxhQUFRLEdBQTBDLEVBQUUsQ0FBQztJQTBDL0QsQ0FBQztJQXhDQyxVQUFVLENBQUMsV0FBbUIsRUFBRSxVQUE2QjtRQUMzRCxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLFVBQVUsQ0FBQztRQUN4QyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRWtCLFlBQVksQ0FBQyxTQUEyQjtRQUN6RCxPQUFPO1lBQ0wsR0FBRyxTQUFTO1lBQ1osUUFBUSxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsUUFBUSxFQUFFLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDakUsQ0FBQztJQUNKLENBQUM7SUFFZSxLQUFLLENBQUMsWUFBWSxDQUNoQyxNQUFjLEVBQ2QsTUFBd0I7UUFFeEIsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNYLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxJQUFJLEVBQUUsYUFBYSxFQUFFLE9BQU8sRUFBRSxHQUFHLE1BQU0sQ0FBQztRQUV4QyxJQUFJLE9BQU8sSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3JDLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDMUMsTUFBTSxNQUFNLEdBQ1YsT0FBTyxVQUFVLEtBQUssVUFBVTtnQkFDOUIsQ0FBQyxDQUFDLE1BQU0sVUFBVSxDQUFDLElBQUksNEJBQThCLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUNwRSxDQUFDLENBQUMsTUFBTSxVQUFVLENBQUM7WUFFdkIsTUFBTSxvQkFBb0IsR0FDeEIsTUFBTSxZQUFZLGtDQUFhLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMseUNBQW9CLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBRTFGLDJDQUFzQixDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUU1RCxhQUFhLEdBQUcseUNBQW9CLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO1lBQ3BGLE9BQU8sR0FBRyxJQUFJLENBQUM7U0FDaEI7UUFFRCxPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxhQUFhLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUNyRCxDQUFDO0NBQ0Y7QUEzQ0QsNkNBMkNDIn0=