"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const collection_context_1 = __importDefault(require("../../context/collection-context"));
const collection_decorator_1 = __importDefault(require("../collection-decorator"));
class OperatorsEmulateCollectionDecorator extends collection_decorator_1.default {
    constructor() {
        super(...arguments);
        this.fields = new Map();
    }
    emulateFieldOperator(name, operator) {
        this.replaceFieldOperator(name, operator, null);
    }
    replaceFieldOperator(name, operator, replaceBy) {
        // Check that the collection can actually support our rewriting
        const pks = datasource_toolkit_1.SchemaUtils.getPrimaryKeys(this.childCollection.schema);
        pks.forEach(pk => {
            const schema = this.childCollection.schema.fields[pk];
            const operators = schema.filterOperators;
            if (!operators?.has('Equal') || !operators?.has('In')) {
                throw new Error(`Cannot override operators on collection '${this.name}': ` +
                    `the primary key columns must support 'Equal' and 'In' operators`);
            }
        });
        // Check that targeted field is valid
        const field = this.childCollection.schema.fields[name];
        datasource_toolkit_1.FieldValidator.validate(this, name);
        if (!field)
            throw new Error('Cannot replace operator for relation');
        // Mark the field operator as replaced.
        if (!this.fields.has(name))
            this.fields.set(name, new Map());
        this.fields.get(name).set(operator, replaceBy);
        this.markSchemaAsDirty();
    }
    refineSchema(childSchema) {
        const fields = {};
        for (const [name, schema] of Object.entries(childSchema.fields)) {
            if (this.fields.has(name)) {
                const column = schema;
                fields[name] = {
                    ...column,
                    filterOperators: new Set([
                        ...(column.filterOperators ?? []),
                        ...this.fields.get(name).keys(),
                    ]),
                };
            }
            else {
                fields[name] = schema;
            }
        }
        return { ...childSchema, fields };
    }
    async refineFilter(caller, filter) {
        return filter?.override({
            conditionTree: await filter.conditionTree?.replaceLeafsAsync(leaf => this.replaceLeaf(caller, leaf, [])),
        });
    }
    async replaceLeaf(caller, leaf, replacements) {
        // ConditionTree is targeting a field on another collection => recurse.
        if (leaf.field.includes(':')) {
            const [prefix] = leaf.field.split(':');
            const schema = this.schema.fields[prefix];
            const association = this.dataSource.getCollection(schema.foreignCollection);
            const associationLeaf = await leaf
                .unnest()
                .replaceLeafsAsync(subLeaf => association.replaceLeaf(caller, subLeaf, replacements));
            return associationLeaf.nest(prefix);
        }
        return this.fields.get(leaf.field)?.has(leaf.operator)
            ? this.computeEquivalent(caller, leaf, replacements)
            : leaf;
    }
    async computeEquivalent(caller, leaf, replacements) {
        const handler = this.fields.get(leaf.field)?.get(leaf.operator);
        if (handler) {
            const replacementId = `${this.name}.${leaf.field}[${leaf.operator}]`;
            const subReplacements = [...replacements, replacementId];
            if (replacements.includes(replacementId)) {
                throw new Error(`Operator replacement cycle: ${subReplacements.join(' -> ')}`);
            }
            const result = await handler(leaf.value, new collection_context_1.default(this, caller));
            if (result) {
                let equivalent = result instanceof datasource_toolkit_1.ConditionTree ? result : datasource_toolkit_1.ConditionTreeFactory.fromPlainObject(result);
                equivalent = await equivalent.replaceLeafsAsync(subLeaf => this.replaceLeaf(caller, subLeaf, subReplacements));
                datasource_toolkit_1.ConditionTreeValidator.validate(equivalent, this);
                return equivalent;
            }
        }
        // Query all records on the dataSource and emulate the filter.
        return datasource_toolkit_1.ConditionTreeFactory.matchRecords(this.schema, leaf.apply(await this.list(caller, new datasource_toolkit_1.PaginatedFilter({}), leaf.projection.withPks(this)), this, caller.timezone));
    }
}
exports.default = OperatorsEmulateCollectionDecorator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZWNvcmF0b3JzL29wZXJhdG9ycy1lbXVsYXRlL2NvbGxlY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx3RUFjeUM7QUFHekMsMEZBQThFO0FBQzlFLG1GQUEwRDtBQUcxRCxNQUFxQixtQ0FBb0MsU0FBUSw4QkFBbUI7SUFBcEY7O1FBRW1CLFdBQU0sR0FBbUQsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQStIdEYsQ0FBQztJQTdIQyxvQkFBb0IsQ0FBQyxJQUFZLEVBQUUsUUFBa0I7UUFDbkQsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELG9CQUFvQixDQUFDLElBQVksRUFBRSxRQUFrQixFQUFFLFNBQTZCO1FBQ2xGLCtEQUErRDtRQUMvRCxNQUFNLEdBQUcsR0FBRyxnQ0FBVyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3BFLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDZixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFpQixDQUFDO1lBQ3RFLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUM7WUFFekMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNyRCxNQUFNLElBQUksS0FBSyxDQUNiLDRDQUE0QyxJQUFJLENBQUMsSUFBSSxLQUFLO29CQUN4RCxpRUFBaUUsQ0FDcEUsQ0FBQzthQUNIO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxxQ0FBcUM7UUFDckMsTUFBTSxLQUFLLEdB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