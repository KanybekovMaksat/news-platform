import { Caller, CollectionSchema, Filter, RecordData } from '@forestadmin/datasource-toolkit';
import { WriteDefinition } from './types';
import CollectionDecorator from '../../collection-decorator';
import DataSourceDecorator from '../../datasource-decorator';
export default class WriteReplacerCollectionDecorator extends CollectionDecorator {
    private handlers;
    readonly dataSource: DataSourceDecorator<WriteReplacerCollectionDecorator>;
    replaceFieldWriting(fieldName: string, definition: WriteDefinition): void;
    protected refineSchema(childSchema: CollectionSchema): CollectionSchema;
    create(caller: Caller, records: RecordData[]): Promise<RecordData[]>;
    update(caller: Caller, filter: Filter, patch: RecordData): Promise<void>;
    /**
     * Takes a patch and recursively applies all rewriting rules to it.
     */
    private rewritePatch;
    private rewriteKey;
    /**
     * Recursively merge patches into a single one ensuring that there is no conflict.
     */
    private deepMerge;
    private isObject;
}
//# sourceMappingURL=collection.d.ts.map