"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const collection_decorator_1 = __importDefault(require("../collection-decorator"));
class ValidationDecorator extends collection_decorator_1.default {
    constructor() {
        super(...arguments);
        this.validation = {};
    }
    addValidation(name, validation) {
        var _a;
        datasource_toolkit_1.FieldValidator.validate(this, name);
        const field = this.childCollection.schema.fields[name];
        if (field?.type !== 'Column')
            throw new Error('Cannot add validators on a relation, use the foreign key instead');
        if (field.isReadOnly)
            throw new Error('Cannot add validators on a readonly field');
        (_a = this.validation)[name] ?? (_a[name] = []);
        this.validation[name].push(validation);
        this.markSchemaAsDirty();
    }
    async create(caller, data) {
        for (const record of data)
            this.validate(record, caller.timezone, true);
        return super.create(caller, data);
    }
    async update(caller, filter, patch) {
        this.validate(patch, caller.timezone, false);
        return super.update(caller, filter, patch);
    }
    refineSchema(subSchema) {
        const schema = { ...subSchema, fields: { ...subSchema.fields } };
        for (const [name, rules] of Object.entries(this.validation)) {
            const field = { ...schema.fields[name] };
            field.validation = ValidationDecorator.deduplicate([...(field.validation ?? []), ...rules]);
            schema.fields[name] = field;
        }
        return schema;
    }
    validate(record, timezone, allFields) {
        for (const [name, rules] of Object.entries(this.validation)) {
            if (allFields || record[name] !== undefined) {
                // When setting a field to null, only the "Present" validator is relevant
                const applicableRules = record[name] === null ? rules.filter(r => r.operator === 'Present') : rules;
                for (const validator of applicableRules) {
                    const rawLeaf = { field: name, ...validator };
                    const tree = datasource_toolkit_1.ConditionTreeFactory.fromPlainObject(rawLeaf);
                    datasource_toolkit_1.ConditionTreeValidator.validate(tree, this);
                    if (!tree.match(record, this, timezone)) {
                        const message = `'${name}' failed validation rule:`;
                        const rule = validator.value !== undefined
                            ? `${validator.operator}(${validator.value})`
                            : `${validator.operator}`;
                        throw new datasource_toolkit_1.ValidationError(`${message} '${rule}'`);
                    }
                }
            }
        }
    }
    /**
     * Deduplicate rules which the frontend understand
     * We ignore other rules as duplications are not an issue within the agent
     */
    static deduplicate(rules) {
        var _a;
        const values = {};
        for (const rule of rules) {
            values[_a = rule.operator] ?? (values[_a] = []);
            values[rule.operator].push(rule);
        }
        // Remove duplicate "Present"
        while (values.Present?.length > 1)
            values.Present.pop();
        // Merge duplicate 'GreaterThan', 'After' and 'LongerThan' (keep the max value)
        for (const operator of ['GreaterThan', 'After', 'LongerThan']) {
            while (values[operator]?.length > 1) {
                const last = values[operator].pop();
                values[operator][0] = {
                    operator,
                    value: ValidationDecorator.max(last.value, values[operator][0].value),
                };
            }
        }
        // Merge duplicate 'LessThan', 'Before' and 'ShorterThan' (keep the min value)
        for (const operator of ['LessThan', 'Before', 'ShorterThan']) {
            while (values[operator]?.length > 1) {
                const last = values[operator].pop();
                values[operator][0] = {
                    operator,
                    value: ValidationDecorator.min(last.value, values[operator][0].value),
                };
            }
        }
        return Object.values(values).reduce((memo, r) => [...memo, ...r], []);
    }
    static min(valueA, valueB) {
        return valueA < valueB ? valueA : valueB;
    }
    static max(valueA, valueB) {
        return valueA < valueB ? valueB : valueA;
    }
}
exports.default = ValidationDecorator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZWNvcmF0b3JzL3ZhbGlkYXRpb24vY29sbGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHdFQVl5QztBQUV6QyxtRkFBMEQ7QUFJMUQsTUFBcUIsbUJBQW9CLFNBQVEsOEJBQW1CO0lBQXBFOztRQUNVLGVBQVUsR0FBK0MsRUFBRSxDQUFDO0lBa0h0RSxDQUFDO0lBaEhDLGFBQWEsQ0FBQyxJQUFZLEVBQUUsVUFBMEI7O1FBQ3BELG1DQUFjLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUVwQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFpQixDQUFDO1FBQ3ZFLElBQUksS0FBSyxFQUFFLElBQUksS0FBSyxRQUFRO1lBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsa0VBQWtFLENBQUMsQ0FBQztRQUN0RixJQUFJLEtBQUssQ0FBQyxVQUFVO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO1FBRW5GLE1BQUEsSUFBSSxDQUFDLFVBQVUsRUFBQyxJQUFJLFNBQUosSUFBSSxJQUFNLEVBQUUsRUFBQztRQUM3QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRVEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFjLEVBQUUsSUFBa0I7UUFDdEQsS0FBSyxNQUFNLE1BQU0sSUFBSSxJQUFJO1lBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUV4RSxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFUSxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQWMsRUFBRSxNQUFjLEVBQUUsS0FBaUI7UUFDckUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUU3QyxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRWtCLFlBQVksQ0FBQyxTQUEyQjtRQUN6RCxNQUFNLE1BQU0sR0FBRyxFQUFFLEdBQUcsU0FBUyxFQUFFLE1BQU0sRUFBRSxFQUFFLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7UUFFakUsS0FBSyxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQzNELE1BQU0sS0FBSyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFrQixDQUFDO1lBQ3pELEtBQUssQ0FBQyxVQUFVLEdBQUcsbUJBQW1CLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQzVGLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO1NBQzdCO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVPLFFBQVEsQ0FBQyxNQUFrQixFQUFFLFFBQWdCLEVBQUUsU0FBa0I7UUFDdkUsS0FBSyxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQzNELElBQUksU0FBUyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxTQUFTLEVBQUU7Z0JBQzNDLHlFQUF5RTtnQkFDekUsTUFBTSxlQUFlLEdBQ25CLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7Z0JBRTlFLEtBQUssTUFBTSxTQUFTLElBQUksZUFBZSxFQUFFO29CQUN2QyxNQUFNLE9BQU8sR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsR0FBRyxTQUFTLEVBQUUsQ0FBQztvQkFDOUMsTUFBTSxJQUFJLEdBQUcseUNBQW9CLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBc0IsQ0FBQztvQkFDaEYsMkNBQXNCLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztvQkFFNUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsRUFBRTt3QkFDdkMsTUFBTSxPQUFPLEdBQUcsSUFBSSxJQUFJLDJCQUEyQixDQUFDO3dCQUNwRCxNQUFNLElBQUksR0FDUixTQUFTLENBQUMsS0FBSyxLQUFLLFNBQVM7NEJBQzNCLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxRQUFRLElBQUksU0FBUyxDQUFDLEtBQUssR0FBRzs0QkFDN0MsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDO3dCQUU5QixNQUFNLElBQUksb0NBQWUsQ0FBQyxHQUFHLE9BQU8sS0FBSyxJQUFJLEdBQUcsQ0FBQyxDQUFDO3FCQUNuRDtpQkFDRjthQUNGO1NBQ0Y7SUFDSCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ssTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUF1Qjs7UUFDaEQsTUFBTSxNQUFNLEdBQWdELEVBQUUsQ0FBQztRQUUvRCxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssRUFBRTtZQUN4QixNQUFNLE1BQUMsSUFBSSxDQUFDLFFBQVEsTUFBcEIsTUFBTSxPQUFvQixFQUFFLEVBQUM7WUFDN0IsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDbEM7UUFFRCw2QkFBNkI7UUFDN0IsT0FBTyxNQUFNLENBQUMsT0FBTyxFQUFFLE1BQU0sR0FBRyxDQUFDO1lBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUV4RCwrRUFBK0U7UUFDL0UsS0FBSyxNQUFNLFFBQVEsSUFBSSxDQUFDLGFBQWEsRUFBRSxPQUFPLEVBQUUsWUFBWSxDQUFDLEVBQUU7WUFDN0QsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDbkMsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO2dCQUVwQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUc7b0JBQ3BCLFFBQVE7b0JBQ1IsS0FBSyxFQUFFLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7aUJBQ3RFLENBQUM7YUFDSDtTQUNGO1FBRUQsOEVBQThFO1FBQzlFLEtBQUssTUFBTSxRQUFRLElBQUksQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLGFBQWEsQ0FBQyxFQUFFO1lBQzVELE9BQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQ25DLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztnQkFFcEMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHO29CQUNwQixRQUFRO29CQUNSLEtBQUssRUFBRSxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO2lCQUN0RSxDQUFDO2FBQ0g7U0FDRjtRQUVELE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVPLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBZSxFQUFFLE1BQWU7UUFDakQsT0FBTyxNQUFNLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUMzQyxDQUFDO0lBRU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFlLEVBQUUsTUFBZTtRQUNqRCxPQUFPLE1BQU0sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQzNDLENBQUM7Q0FDRjtBQW5IRCxzQ0FtSEMifQ==