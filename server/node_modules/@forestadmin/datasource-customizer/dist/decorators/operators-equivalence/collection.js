"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const collection_decorator_1 = __importDefault(require("../collection-decorator"));
/**
 * Replace unsupported operators in conditions trees by an equivalent subtree which is supported.
 *
 * For example, the "IContains" operator is not supported by most driver, so it is replaced by a
 * "ILike" operator.
 */
class OperatorsEquivalenceCollectionDecorator extends collection_decorator_1.default {
    refineSchema(childSchema) {
        const fields = {};
        for (const [name, schema] of Object.entries(childSchema.fields)) {
            if (schema.type === 'Column') {
                const newOperators = datasource_toolkit_1.allOperators.filter(operator => datasource_toolkit_1.ConditionTreeEquivalent.hasEquivalentTree(operator, schema.filterOperators, schema.columnType));
                fields[name] = { ...schema, filterOperators: new Set(newOperators) };
            }
            else {
                fields[name] = schema;
            }
        }
        return { ...childSchema, fields };
    }
    async refineFilter(caller, filter) {
        return filter?.override({
            conditionTree: filter.conditionTree?.replaceLeafs(leaf => {
                const schema = datasource_toolkit_1.CollectionUtils.getFieldSchema(this.childCollection, leaf.field);
                return datasource_toolkit_1.ConditionTreeEquivalent.getEquivalentTree(leaf, schema.filterOperators, schema.columnType, caller.timezone);
            }),
        });
    }
}
exports.default = OperatorsEquivalenceCollectionDecorator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZWNvcmF0b3JzL29wZXJhdG9ycy1lcXVpdmFsZW5jZS9jb2xsZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsd0VBU3lDO0FBRXpDLG1GQUEwRDtBQUUxRDs7Ozs7R0FLRztBQUNILE1BQXFCLHVDQUF3QyxTQUFRLDhCQUFtQjtJQUNuRSxZQUFZLENBQUMsV0FBNkI7UUFDM0QsTUFBTSxNQUFNLEdBQWdDLEVBQUUsQ0FBQztRQUUvQyxLQUFLLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDL0QsSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRTtnQkFDNUIsTUFBTSxZQUFZLEdBQUcsaUNBQVksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FDbEQsNENBQXVCLENBQUMsaUJBQWlCLENBQ3ZDLFFBQVEsRUFDUixNQUFNLENBQUMsZUFBZSxFQUN0QixNQUFNLENBQUMsVUFBVSxDQUNsQixDQUNGLENBQUM7Z0JBRUYsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLEVBQUUsZUFBZSxFQUFFLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUM7YUFDdEU7aUJBQU07Z0JBQ0wsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQzthQUN2QjtTQUNGO1FBRUQsT0FBTyxFQUFFLEdBQUcsV0FBVyxFQUFFLE1BQU0sRUFBRSxDQUFDO0lBQ3BDLENBQUM7SUFFa0IsS0FBSyxDQUFDLFlBQVksQ0FDbkMsTUFBYyxFQUNkLE1BQXdCO1FBRXhCLE9BQU8sTUFBTSxFQUFFLFFBQVEsQ0FBQztZQUN0QixhQUFhLEVBQUUsTUFBTSxDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3ZELE1BQU0sTUFBTSxHQUFHLG9DQUFlLENBQUMsY0FBYyxDQUMzQyxJQUFJLENBQUMsZUFBZSxFQUNwQixJQUFJLENBQUMsS0FBSyxDQUNLLENBQUM7Z0JBRWxCLE9BQU8sNENBQXVCLENBQUMsaUJBQWlCLENBQzlDLElBQUksRUFDSixNQUFNLENBQUMsZUFBZSxFQUN0QixNQUFNLENBQUMsVUFBVSxFQUNqQixNQUFNLENBQUMsUUFBUSxDQUNoQixDQUFDO1lBQ0osQ0FBQyxDQUFDO1NBQ0gsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBM0NELDBEQTJDQyJ9