"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
/** Collection wrapper which accepts plain objects in all methods */
class RelaxedCollection {
    constructor(collection, caller) {
        this.collection = collection;
        this.caller = caller;
    }
    /**
     * Execute a given action
     * @param name the name of the action
     * @param formValues the values of the form, if the action rely on an action form
     * @param filter the filter used to represent the selected records to use the action on
     * @example
     * .execute(
     *    'Refund',
     *    { reason: 'Article is broken' },
     *    {
     *      conditionTree: {
     *        field: 'id',
     *        operator: 'Equal',
     *        value: 1
     *      }
     *    }
     * );
     */
    execute(name, formValues, filter) {
        const filterInstance = this.buildFilter(filter);
        return this.collection.execute(this.caller, name, formValues, filterInstance);
    }
    getForm(name, formValues, filter) {
        const filterInstance = this.buildFilter(filter);
        return this.collection.getForm(this.caller, name, formValues, filterInstance);
    }
    /**
     * Create a list of records
     * @param data An array of records to create
     * @example
     * .create([
     *    { amountInEur: 150, description: 'Buy dvd' },
     *    { amountInEur: -100, description: 'Refund' },
     * ]);
     */
    create(data) {
        return this.collection.create(this.caller, data);
    }
    /**
     * List multiple records
     * @param filter the filter used to select the records to list
     * @param projection an array of fields name representing the data to select
     * @example
     * .list({
     *    conditionTree: {
     *      aggregator: 'And',
     *      conditions: [{
     *        field: 'amountInEur',
     *        operator: 'GreaterThan',
     *        value: 1000
     *      }, {
     *        field: 'description',
     *        operator: 'Contains',
     *        value: 'Refund',
     *      }],
     *      page: { limit: 10, skip: 0 },
     *      sort: [{ field: 'id', ascending: true }]
     *   }
     * }, ['id', 'amountInEur', 'description']);
     */
    list(filter, projection) {
        const filterInstance = this.buildPaginatedFilter(filter);
        const projectionInstance = this.buildProjection(projection);
        const rows = this.collection.list(this.caller, filterInstance, projectionInstance);
        return rows;
    }
    /**
     * Update a list of records
     * @param filter the filter that represent the list of records to update
     * @param patch the patch to apply on the selected records
     * @example
     * .update({
     *    conditionTree: {
     *      field: 'isActive',
     *      operator: 'Equal',
     *      value: false
     *    },
     * }, { isActive: true });
     */
    update(filter, patch) {
        const filterInstance = this.buildFilter(filter);
        return this.collection.update(this.caller, filterInstance, patch);
    }
    /**
     * Delete a list of records
     * @param filter the filter that represent the list of records to update
     * @example
     * .delete({
     *    conditionTree: {
     *      field: 'isBlocked',
     *      operator: 'Equal',
     *      value: false,
     *    },
     * });
     */
    delete(filter) {
        const filterInstance = this.buildFilter(filter);
        return this.collection.delete(this.caller, filterInstance);
    }
    /**
     * Aggregate a list of records
     * @param filter the filter used to list the records to aggregate
     * @param aggregation the aggregation to apply
     * @param limit the maximum number of result to return
     * @example
     * .aggregate({
     *    conditionTree: {
     *      field: "user:company:id",
     *      operator: "In",
     *      value: records.map((r) => r.id),
     *    },
     * }, {
     *    operation: "Sum",
     *    field: "amountInEur",
     *    groups: [{ field: "user:company:id" }],
     * }, 10);
     */
    async aggregate(filter, aggregation, limit) {
        const filterInstance = this.buildFilter(filter);
        const aggregationInstance = this.buildAggregation(aggregation);
        const result = await this.collection.aggregate(this.caller, filterInstance, aggregationInstance, limit);
        return result;
    }
    buildFilter(filter) {
        return filter
            ? new datasource_toolkit_1.Filter({
                ...filter,
                conditionTree: filter.conditionTree
                    ? datasource_toolkit_1.ConditionTreeFactory.fromPlainObject(filter.conditionTree)
                    : undefined,
            })
            : null;
    }
    buildPaginatedFilter(filter) {
        return new datasource_toolkit_1.PaginatedFilter({
            ...filter,
            conditionTree: filter?.conditionTree
                ? datasource_toolkit_1.ConditionTreeFactory.fromPlainObject(filter.conditionTree)
                : undefined,
            sort: filter.sort ? new datasource_toolkit_1.Sort(...filter.sort) : undefined,
            page: filter.page ? new datasource_toolkit_1.Page(filter.page.skip, filter.page.limit) : undefined,
        });
    }
    buildProjection(projection) {
        return new datasource_toolkit_1.Projection(...projection);
    }
    buildAggregation(aggregation) {
        return new datasource_toolkit_1.Aggregation(aggregation);
    }
}
exports.default = RelaxedCollection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb250ZXh0L3JlbGF4ZWQtd3JhcHBlcnMvY29sbGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdFQWF5QztBQWV6QyxvRUFBb0U7QUFDcEUsTUFBcUIsaUJBQWlCO0lBT3BDLFlBQVksVUFBc0IsRUFBRSxNQUFjO1FBQ2hELElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBQzdCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FpQkc7SUFDSCxPQUFPLENBQUMsSUFBWSxFQUFFLFVBQXNCLEVBQUUsTUFBc0I7UUFDbEUsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVoRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUNoRixDQUFDO0lBRUQsT0FBTyxDQUFDLElBQVksRUFBRSxVQUF1QixFQUFFLE1BQXNCO1FBQ25FLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFaEQsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDaEYsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0gsTUFBTSxDQUFDLElBQXdCO1FBQzdCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQWdDLENBQUM7SUFDbEYsQ0FBQztJQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FxQkc7SUFDSCxJQUFJ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