import { DataSource, DataSourceFactory, DataSourceSchema, Logger } from '@forestadmin/datasource-toolkit';
import CollectionCustomizer from './collection-customizer';
import { DataSourceChartDefinition } from './decorators/chart/types';
import { TCollectionName, TSchema } from './templates';
import { DataSourceOptions, Plugin } from './types';
/**
 * Allow to create a new Forest Admin agent from scratch.
 * Builds the application by composing and configuring all the collection decorators.
 *
 * Minimal code to add a datasource
 * @example
 * new AgentBuilder(options)
 *  .addDataSource(new SomeDataSource())
 *  .start();
 */
export default class DataSourceCustomizer<S extends TSchema = TSchema> {
    private readonly compositeDataSource;
    private readonly stack;
    /**
     * Retrieve schema of the agent
     */
    get schema(): DataSourceSchema;
    /**
     * Get list of customizable collections
     */
    get collections(): CollectionCustomizer<S>[];
    constructor();
    /**
     * Add a datasource
     * @param factory the datasource to add
     * @param options the options
     */
    addDataSource(factory: DataSourceFactory, options?: DataSourceOptions): this;
    /**
     * Create a new API chart
     * @param name name of the chart
     * @param definition definition of the chart
     * @example
     * .addChart('numCustomers', {
     *   type: 'Value',
     *   render: (context, resultBuilder) => {
     *     return resultBuilder.value(123);
     *   }
     * })
     */
    addChart(name: string, definition: DataSourceChartDefinition<S>): this;
    /**
     * Allow to interact with a decorated collection
     * @param name the name of the collection to manipulate
     * @param handle a function that provide a
     *   collection builder on the given collection name
     * @example
     * .customizeCollection('books', books => books.renameField('xx', 'yy'))
     */
    customizeCollection<N extends TCollectionName<S>>(name: N, handle: (collection: CollectionCustomizer<S, N>) => unknown): this;
    /**
     * Get given collection by name
     * @param name name of the collection
     */
    getCollection<N extends TCollectionName<S>>(name: N): CollectionCustomizer<S, N>;
    /**
     * Load a plugin across all collections
     * @param plugin instance of the plugin
     * @param options options which need to be passed to the plugin
     * @example
     * import { advancedExport } from '@forestadmin/plugin-advanced-export';
     *
     * dataSourceCustomizer.use(advancedExportPlugin, { format: 'xlsx' });
     */
    use<Options>(plugin: Plugin<Options>, options?: Options): this;
    getDataSource(logger: Logger): Promise<DataSource>;
    getFactory(): DataSourceFactory;
    updateTypesOnFileSystem(typingsPath: string, typingsMaxDepth: number): Promise<void>;
}
//# sourceMappingURL=datasource-customizer.d.ts.map